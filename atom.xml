<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>回忆宫殿</title>
  
  <subtitle>MemoryPalace</subtitle>
  <link href="https://mralridge.github.io/atom.xml" rel="self"/>
  
  <link href="https://mralridge.github.io/"/>
  <updated>2024-06-29T10:03:27.012Z</updated>
  <id>https://mralridge.github.io/</id>
  
  <author>
    <name>F10atingHeart</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UML学习记录</title>
    <link href="https://mralridge.github.io/2024/06/29/UML%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://mralridge.github.io/2024/06/29/UML%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2024-06-29T09:39:27.000Z</published>
    <updated>2024-06-29T10:03:27.012Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0-什么是UML"><a href="#0-什么是UML" class="headerlink" title="0&#x2F;什么是UML?"></a>0&#x2F;什么是UML?</h1><p>UML——Unified modeling language UML(统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果.</p><p>UML本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等</p><h1 id="1-UML的分类"><a href="#1-UML的分类" class="headerlink" title="1&#x2F;UML的分类"></a>1&#x2F;UML的分类</h1><h2 id="1-1-UML图"><a href="#1-1-UML图" class="headerlink" title="1.1&#x2F;UML图"></a>1.1&#x2F;UML图</h2><p>UML图本质上是将你的想法转述给别人,所以主要分为以下几类:</p><ul><li>用例图</li><li>静态结构图:类图、对象图、包图、组件图、部署图</li><li>动态行为图:交互图（时序图与协作图）、状态图、活动图</li></ul><p>类图是用来描述类与类之间的关系的，所以是UML图中最核心的。</p><h2 id="1-2-UML类图"><a href="#1-2-UML类图" class="headerlink" title="1.2&#x2F;UML类图"></a>1.2&#x2F;UML类图</h2><p>类图用于描述系统中的类（对象）本身的<code>组成</code>和类（对象）之间的各种<code>静态关系</code>,类之间的关系有：</p><ul><li>依赖</li><li>泛化（继承）</li><li>实现</li><li>关联</li><li>聚合与组合</li></ul><p>所以类图可以用以下例子来解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用类图就可以表示为</p><p><img src="https://s21.ax1x.com/2024/06/29/pkcpRW4.png" alt="用UML表示上面的代码"></p><h1 id="2-类图关系"><a href="#2-类图关系" class="headerlink" title="2&#x2F;类图关系"></a>2&#x2F;类图关系</h1><h2 id="2-0-类图关系概述"><a href="#2-0-类图关系概述" class="headerlink" title="2.0&#x2F;类图关系概述"></a>2.0&#x2F;类图关系概述</h2><blockquote><ul><li>设计一个类中的信息和行为要实现<code>高内聚</code></li><li>设计多个类，类之间要做到<code>低耦合</code></li></ul></blockquote><p>在实际的系统应用中，我们所<code>创建的多个对象往往是有联系</code>的, 通常情况下对象之间的关系可以分为以下几类：</p><ul><li>泛化关系</li><li>实现关系</li><li>依赖关系</li><li>关联关系</li><li>聚合关系</li><li>组合关系</li></ul><h2 id="2-1-泛化（继承）关系"><a href="#2-1-泛化（继承）关系" class="headerlink" title="2.1&#x2F;泛化（继承）关系"></a>2.1&#x2F;泛化（继承）关系</h2><p>简单的说，<code>泛化</code>就是<code>继承</code>,即一个类（我们称之为子类，子接口）继承(<code>extend</code>)另外一个类（我们称之为父类，父接口）的功能，并且可以增加自己<code>额外的</code>一些功能。</p><p>在UML关系中，继承通常使用<strong>空心三角+实线</strong>表示.</p><p>接口间的继承关系通常用圆心表示，而类之间的继承关系通常用矩形表示</p><p><img src="https://s21.ax1x.com/2024/06/29/pkc9ApQ.png" alt="UML表示类的继承"></p><h2 id="2-2-实现关系"><a href="#2-2-实现关系" class="headerlink" title="2.2&#x2F;实现关系"></a>2.2&#x2F;实现关系</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="UML" scheme="https://mralridge.github.io/tags/UML/"/>
    
    <category term="工作技能" scheme="https://mralridge.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%8A%80%E8%83%BD/"/>
    
    <category term="基本功" scheme="https://mralridge.github.io/tags/%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>浅入浅出游戏引擎笔记（二）</title>
    <link href="https://mralridge.github.io/2024/06/29/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA2/"/>
    <id>https://mralridge.github.io/2024/06/29/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA2/</id>
    <published>2024-06-29T07:27:12.000Z</published>
    <updated>2024-06-29T09:25:15.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-索引与缓冲区对象"><a href="#1-索引与缓冲区对象" class="headerlink" title="1&#x2F;索引与缓冲区对象"></a>1&#x2F;索引与缓冲区对象</h2><p>在上一章的实例中,引擎主循环每执行一次,就要上传顶点数据到GPU来实现渲染.对于简单的图形来说,这是可以接受的.但是实际项目中动辄几W的顶点数量不可能也使用这种方法来处理顶点,不然每一帧都要把所有顶点上传一次,那主循环不用干别的事了.</p><p>所以要优化这种情况,有两种方式:</p><ul><li>减少数据上传量</li><li>在<code>GPU</code>上缓存数据</li></ul><p>OpenGL对应的提供了两种方法来实现,分别是<code>顶点索引</code>和<code>缓冲区对象</code>.</p><h3 id="1-1-顶点数组对象"><a href="#1-1-顶点数组对象" class="headerlink" title="1.1&#x2F;顶点数组对象"></a>1.1&#x2F;顶点数组对象</h3><p>而且各位不要忘了,OpenGL是一个典型的<code>C/S</code>架构,也就是说CPU在OpenGL里面扮演的是<code>客户端</code>的角色,而GPU在OpenGL里面扮演的是<code>服务端</code>的角色.</p><p>这就会产生一个问题:CPU在通知GPU执行一个API之后,必须等待GPU返回一个结果之后才能继续执行下一个API.换句话说,要调用的OpenGL API越多,性能就越差(要等待很多次返回结果)</p><p>那么有没有一种方法,把数个命令的结果保存在GPU上面,CPU只需要调用一个API就可以完成执行数个命令的结果呢?</p><p>答案是<code>顶点数组对象</code></p><h4 id="1-1-1-何为顶点索引"><a href="#1-1-1-何为顶点索引" class="headerlink" title="1.1.1&#x2F;何为顶点索引"></a>1.1.1&#x2F;何为顶点索引</h4><p>回顾之前画矩形的时候,我们上传了6个顶点,但是实际上只有4个顶点是真正有用的,剩余两个顶点只是为了凑出两个三角形而上传的.这样不仅增加了顶点的上传数量,也增加了GPU顶点着色器的运行次数</p><p>以正方形的顶点坐标为例,顶点坐标是一个数组,那么顶点索引就是这个数组的index</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> glm::vec3 kPositions[<span class="number">6</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一个三角形</span></span><br><span class="line">    &#123; <span class="number">-1.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//左下</span></span><br><span class="line">    &#123;  <span class="number">1.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//右下</span></span><br><span class="line">    &#123;  <span class="number">1.0f</span>,  <span class="number">1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//右上</span></span><br><span class="line">    <span class="comment">//第二个三角形</span></span><br><span class="line">    &#123;  <span class="number">1.0f</span>,  <span class="number">1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//右上</span></span><br><span class="line">    &#123; <span class="number">-1.0f</span>,  <span class="number">1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//左上</span></span><br><span class="line">    &#123; <span class="number">-1.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>&#125;<span class="comment">//左下</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>去掉重复的定点之后,其实只有四个顶点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> glm::vec3 kPositions[<span class="number">4</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    &#123; <span class="number">-1.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//左下</span></span><br><span class="line">    &#123;  <span class="number">1.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//右下</span></span><br><span class="line">    &#123;  <span class="number">1.0f</span>,  <span class="number">1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//右上</span></span><br><span class="line">    &#123; <span class="number">-1.0f</span>,  <span class="number">1.0f</span>, <span class="number">0.0f</span>&#125;,<span class="comment">//左上</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是只有4个顶点的情况下,如何组成两个三角形呢?答案是去重之后的顶点坐标数据不重复,但是可以新建一个数组,存储重复的顶点索引,利用索引调用顶点坐标</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> glm::vec3 indices[<span class="number">6</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一个三角形</span></span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">    <span class="comment">//第二个三角形</span></span><br><span class="line">    <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>借助顶点索引数组,我们间接地形成了两个三角形.</p><h4 id="1-1-2-何为顶点"><a href="#1-1-2-何为顶点" class="headerlink" title="1.1.2&#x2F;何为顶点"></a>1.1.2&#x2F;何为顶点</h4><p>在作者之前的文章中,使用了如下的代码来设置了顶点的属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glVertexAttribPointer</span>(vpos_location, <span class="number">3</span>, GL_FLOAT, <span class="literal">false</span>, <span class="built_in">sizeof</span>(glm::vec3), kPositions);</span><br></pre></td></tr></table></figure><p>具体绘制多少个顶点,是在如下代码中决定的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="number">0</span>, <span class="number">6</span>*<span class="number">6</span>);<span class="comment">//表示从第0个顶点开始画，总共画6个面，每个面6个顶点(两个三角形)。</span></span><br></pre></td></tr></table></figure><p>之前我们提到过,顶点着色器是每个顶点都要执行一次.换句话说,<code>glDrawArrays</code>制定了多少个顶点,就执行多少次.</p><blockquote><p>那么每次执行，就以当前顶点序号为下标，从<code>glVertexAttribPointer</code>设置的顶点属性去拿数据，设置到顶点shader的变量<code>vpos_location</code>中。</p><p>那么顶点属性的数据，这个数组，长度一定是要等于<code>glDrawArrays</code>指定的顶点数的，不然就会取不到数据。</p><p>按照这个逻辑，我将所有用<code>glVertexAttribPointer</code>设置的顶点属性，相同下标的，称之为一个顶点。</p></blockquote><p><img src="https://s21.ax1x.com/2024/06/29/pkcSY8J.png" alt="大概是这个意思"></p><p>也就是说,<code>一个顶点</code>包含了</p><ul><li>坐标</li><li>颜色</li><li>UV坐标</li></ul><p>三个数据,只要这三个数据有一个不同,那就不能称之为<code>两个相同的顶点</code>.也就是说,使用顶点索引需要去重,本质上是去掉三者完全相同的顶点.</p><p>因此,对于项目中存放顶点的定义<code>vertex_data.h</code>需要修改为如下代码.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顶点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span></span><br><span class="line">&#123;</span><br><span class="line">    glm::vec3 pos_;</span><br><span class="line">    glm::vec4 color_;</span><br><span class="line">    glm::vec2 uv_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> Vertex kVertexs[<span class="number">36</span>] =&#123;</span><br><span class="line">    <span class="comment">//Front</span></span><br><span class="line">    glm::<span class="built_in">vec3</span>(<span class="number">-1.0f</span>, <span class="number">-1.0f</span>, <span class="number">1.0f</span>), glm::<span class="built_in">vec4</span>(<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>),   glm::<span class="built_in">vec2</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>),</span><br><span class="line">    glm::<span class="built_in">vec3</span>( <span class="number">1.0f</span>, <span class="number">-1.0f</span>, <span class="number">1.0f</span>), glm::<span class="built_in">vec4</span>(<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>),   glm::<span class="built_in">vec2</span>(<span class="number">1.0f</span>, <span class="number">0.0f</span>),</span><br><span class="line">    glm::<span class="built_in">vec3</span>( <span class="number">1.0f</span>,  <span class="number">1.0f</span>, <span class="number">1.0f</span>), glm::<span class="built_in">vec4</span>(<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>),   glm::<span class="built_in">vec2</span>(<span class="number">1.0f</span>, <span class="number">1.0f</span>),</span><br><span class="line">    glm::<span class="built_in">vec3</span>(<span class="number">-1.0f</span>, <span class="number">-1.0f</span>, <span class="number">1.0f</span>), glm::<span class="built_in">vec4</span>(<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>),   glm::<span class="built_in">vec2</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>),</span><br><span class="line">    glm::<span class="built_in">vec3</span>( <span class="number">1.0f</span>,  <span class="number">1.0f</span>, <span class="number">1.0f</span>), glm::<span class="built_in">vec4</span>(<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>),   glm::<span class="built_in">vec2</span>(<span class="number">1.0f</span>, <span class="number">1.0f</span>),</span><br><span class="line">    glm::<span class="built_in">vec3</span>(<span class="number">-1.0f</span>,  <span class="number">1.0f</span>, <span class="number">1.0f</span>), glm::<span class="built_in">vec4</span>(<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>),   glm::<span class="built_in">vec2</span>(<span class="number">0.0f</span>, <span class="number">1.0f</span>),</span><br><span class="line">    <span class="comment">//back</span></span><br><span class="line">    glm::<span class="built_in">vec3</span>(<span class="number">-1.0f</span>, <span class="number">-1.0f</span>, <span class="number">-1.0f</span>), glm::<span class="built_in">vec4</span>(<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>),   glm::<span class="built_in">vec2</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>),</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至此,我们已经模糊掉了顶点属性的概念,我们面对的是整个顶点对象.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="浅入浅出游戏引擎" scheme="https://mralridge.github.io/categories/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="c++" scheme="https://mralridge.github.io/tags/c/"/>
    
    <category term="游戏引擎" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="浅入浅出" scheme="https://mralridge.github.io/tags/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    
    <category term="OpenGL" scheme="https://mralridge.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>网游中常见的&quot;随机&quot;</title>
    <link href="https://mralridge.github.io/2024/06/28/%E7%BD%91%E6%B8%B8%E5%B8%B8%E8%A7%81%E6%A6%82%E7%8E%87%E6%8E%A7%E5%88%B6/"/>
    <id>https://mralridge.github.io/2024/06/28/%E7%BD%91%E6%B8%B8%E5%B8%B8%E8%A7%81%E6%A6%82%E7%8E%87%E6%8E%A7%E5%88%B6/</id>
    <published>2024-06-28T08:59:09.000Z</published>
    <updated>2024-06-28T10:00:45.019Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0&#x2F;前言"></a>0&#x2F;前言</h3><p>从开始工作到现在对于游戏中的”随机”也接触了不少,这篇文章就来整理一下目前我对游戏中如何控制”随机”的看法</p><h3 id="1-从最基础的开始"><a href="#1-从最基础的开始" class="headerlink" title="1&#x2F;从最基础的开始"></a>1&#x2F;从最基础的开始</h3><p>现在让我们来设计一个玩法</p><blockquote><p>这是一个回合制RPG游戏,现在有10层地图,每层地图都有一些随时刷新的游荡小怪,击败这些小怪就可以获得某种的材料</p></blockquote><p>这样一个简单的玩法,我们有以下几种设计方法</p><h4 id="1-1-依据层数的随机"><a href="#1-1-依据层数的随机" class="headerlink" title="1.1&#x2F;依据层数的随机"></a>1.1&#x2F;依据层数的随机</h4><p>顾名思义,地图层数越高,材料的产出概率越高,同时材料的获取效率也会变高</p><p>这样设计的好处是玩家的产出与实例相绑定,驱动玩家去推进地图进度.</p><p>当然这种设计方式也有一些问题,例如</p><ul><li>材料不能与地图进度绑定(提交材料进入下层地图)</li><li>每层材料的产出需要经过调整(如果你打到最高层,每次打怪的最高产出还是和第一层一样,那就没有意思了)</li></ul><h4 id="1-2-依据次数的随机"><a href="#1-2-依据次数的随机" class="headerlink" title="1.2&#x2F;依据次数的随机"></a>1.2&#x2F;依据次数的随机</h4><p>这种方式将产出与地图分离开来,具体的做法是设定每日前XX次是一个概率,之后XXX次是一个概率,XXX次之后是固定概率</p><p>这样做的好处是可以控制玩家每日产出的大体上限,如下表所示</p><table><thead><tr><th align="center">次数</th><th align="center">不掉</th><th align="center">掉1个</th><th align="center">掉2个</th><th align="center">掉5个</th><th align="center">产出期望(E)</th><th align="center">打满可得</th></tr></thead><tbody><tr><td align="center">1-10次</td><td align="center">4000</td><td align="center">3000</td><td align="center">2000</td><td align="center">1000</td><td align="center">1.2</td><td align="center">12</td></tr><tr><td align="center">10-15次</td><td align="center">4500</td><td align="center">2900</td><td align="center">1800</td><td align="center">800</td><td align="center">1.05</td><td align="center">17.25</td></tr><tr><td align="center">15-20次</td><td align="center">5000</td><td align="center">2800</td><td align="center">1600</td><td align="center">600</td><td align="center">0.9</td><td align="center">21.75</td></tr><tr><td align="center">20-25次</td><td align="center">5500</td><td align="center">2700</td><td align="center">1400</td><td align="center">400</td><td align="center">0.75</td><td align="center">25.5</td></tr><tr><td align="center">25-30次</td><td align="center">6000</td><td align="center">2600</td><td align="center">1200</td><td align="center">200</td><td align="center">0.6</td><td align="center">28.5</td></tr><tr><td align="center">30-40次</td><td align="center">6500</td><td align="center">2300</td><td align="center">1000</td><td align="center">200</td><td align="center">0.53</td><td align="center">33.8</td></tr><tr><td align="center">40-60次</td><td align="center">8000</td><td align="center">1000</td><td align="center">800</td><td align="center">200</td><td align="center">0.36</td><td align="center">41</td></tr><tr><td align="center">60-90次</td><td align="center">9000</td><td align="center">400</td><td align="center">400</td><td align="center">200</td><td align="center">0.22</td><td align="center">47.6</td></tr><tr><td align="center">90次以上</td><td align="center">9500</td><td align="center">200</td><td align="center">200</td><td align="center">100</td><td align="center">0.11</td><td align="center"></td></tr></tbody></table><p>不过这样设计的话就只适用于材料与地图绑定的情况,此时玩家刷这个材料只是为了进入下一个地图,那么你就要在下一个地图为玩家设置足以驱动玩家打材料的奖励</p><p>(To Be Continued)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工作经验" scheme="https://mralridge.github.io/categories/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="游戏开发" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="游戏设计" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>(1) 基础的战斗实现 - RE:从0开始的RPG游戏制作</title>
    <link href="https://mralridge.github.io/2024/06/26/%E6%88%98%E6%96%97%E9%83%A8%E5%88%86%E5%9F%BA%E7%A1%80/"/>
    <id>https://mralridge.github.io/2024/06/26/%E6%88%98%E6%96%97%E9%83%A8%E5%88%86%E5%9F%BA%E7%A1%80/</id>
    <published>2024-06-26T07:39:54.000Z</published>
    <updated>2024-06-27T09:48:01.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-基本结构"><a href="#0-基本结构" class="headerlink" title="0&#x2F;基本结构"></a>0&#x2F;基本结构</h3><p>在上一章我们已经想好我们要做什么事了，那么从现在开始就要落实下去。根据我们之前的设想，战斗部分的逻辑可以用这张图来表示。</p><p><img src="https://s21.ax1x.com/2024/06/26/pkyeodA.png" alt="最初的战斗逻辑"></p><p>乍一看在玩家眼中确实是这样的，我们不妨想的更详细一些，把buff之类的东西考虑进去，之后我们就能得到下面这张图</p><p><img src="https://s21.ax1x.com/2024/06/26/pkynG90.png" alt="优化过后的战斗逻辑"></p><p>虽然这个流程图还没有详细到我们实际实现的部分，但是我们可以根据这个流程图来搭建一个框架</p><h3 id="1-战斗管理器"><a href="#1-战斗管理器" class="headerlink" title="1&#x2F;战斗管理器"></a>1&#x2F;战斗管理器</h3><p>根据我之前那堪称贫瘠的项目经验，把逻辑与数据分开是最好的实现方式。这种思想就有点类似于工厂模式，我们在定义好“战斗工厂”以后，每次想要开启战斗就让“战斗工厂”去“生产”一个出来就好了。</p><p>所以我们要创建脚本<code>Script\System\BattleManager.cs</code>来实现。</p><div class="note info flat"><p>强烈推荐在创建代码的时候，预先设计好项目的目录结构，不然代码多了之后就会非常折磨人<br>所以我比较推荐的目录结构是下面这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\U3DPROJ\RPG\ASSETS        </span><br><span class="line">├─Scenes</span><br><span class="line">└─Scripts</span><br><span class="line">    ├─DataDef</span><br><span class="line">    ├─System</span><br><span class="line">    └─UI</span><br></pre></td></tr></table></figure></div><p>这里我就直接贴出代码,之后再一段一段讲解</p><h4 id="1-0-枚举定义"><a href="#1-0-枚举定义" class="headerlink" title="1.0&#x2F;枚举定义"></a>1.0&#x2F;枚举定义</h4><p>首先我们要将一些枚举提前定义下来</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 所有与战斗有关的常量都在这定义</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BattleDef</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 战斗的状态标志</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> BattleState : <span class="built_in">byte</span></span><br><span class="line">&#123;</span><br><span class="line">    Enter = <span class="number">0</span>,      <span class="comment">// 进入战斗</span></span><br><span class="line">    BeforeAct = <span class="number">1</span>,  <span class="comment">// 行动前</span></span><br><span class="line">    SelectAct = <span class="number">2</span>,  <span class="comment">// 选择行动中</span></span><br><span class="line">    Acting = <span class="number">3</span>,     <span class="comment">// 行动表演中</span></span><br><span class="line">    AfterAct = <span class="number">4</span>,   <span class="comment">// 行动后</span></span><br><span class="line">    ResultWin = <span class="number">5</span>,  <span class="comment">// 战斗胜利</span></span><br><span class="line">    ResultLose = <span class="number">6</span>, <span class="comment">// 战斗失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Buff触发的时机</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> BuffTime : <span class="built_in">byte</span></span><br><span class="line">&#123;</span><br><span class="line">    None = <span class="number">0</span>,</span><br><span class="line">    Enter = <span class="number">1</span>,          <span class="comment">// 自身入场时</span></span><br><span class="line">    Exit = <span class="number">2</span>,           <span class="comment">// 自身离场时</span></span><br><span class="line">    BeforeAct = <span class="number">3</span>,      <span class="comment">// 自身行动前</span></span><br><span class="line">    AfterAct = <span class="number">4</span>,       <span class="comment">// 自身行动后</span></span><br><span class="line">    AddBuff = <span class="number">5</span>,        <span class="comment">// 添加其他增益时</span></span><br><span class="line">    RemoveBuff = <span class="number">6</span>,     <span class="comment">// 移除其他增益时</span></span><br><span class="line">    AddDebuff = <span class="number">7</span>,      <span class="comment">// 添加其他减益时</span></span><br><span class="line">    RemoveDebuff = <span class="number">8</span>,   <span class="comment">// 移除其他减益时</span></span><br><span class="line">    DeadSelf = <span class="number">9</span>,       <span class="comment">// 自身死亡时</span></span><br><span class="line">    ReviveSelf = <span class="number">10</span>,    <span class="comment">// 自身复活时</span></span><br><span class="line">    DeadAlly = <span class="number">11</span>,      <span class="comment">// 友方死亡时</span></span><br><span class="line">    ReviveAlly = <span class="number">12</span>,    <span class="comment">// 友方复活时</span></span><br><span class="line">    Dead = <span class="number">13</span>,          <span class="comment">// 其他单位死亡时</span></span><br><span class="line">    Revive = <span class="number">14</span>,        <span class="comment">// 其他单位复活时</span></span><br><span class="line">    OnCrit = <span class="number">15</span>,        <span class="comment">// 暴击时</span></span><br><span class="line">    OnCrited = <span class="number">16</span>,      <span class="comment">// 受到暴击时</span></span><br><span class="line">    OnKill = <span class="number">17</span>,        <span class="comment">// 造成击杀时</span></span><br><span class="line">    OnAttack = <span class="number">18</span>,      <span class="comment">// 使用普攻时</span></span><br><span class="line">    BeforeAllyCast = <span class="number">19</span>,<span class="comment">// 友方使用技能前</span></span><br><span class="line">    AfterAllyCast = <span class="number">20</span>, <span class="comment">// 友方使用技能后</span></span><br><span class="line">    BeforeEnemyCast = <span class="number">21</span>,<span class="comment">// 敌方使用技能前</span></span><br><span class="line">    AfterEnemyCast = <span class="number">22</span>,<span class="comment">// 敌方使用技能后</span></span><br><span class="line">    BeforeCast = <span class="number">23</span>,    <span class="comment">// 自身使用技能前</span></span><br><span class="line">    AfterCast = <span class="number">24</span>,     <span class="comment">// 自身使用技能后</span></span><br><span class="line">    GetCost = <span class="number">25</span>,       <span class="comment">// 获得资源时</span></span><br><span class="line">    ConsumeCost = <span class="number">26</span>,   <span class="comment">// 消耗资源时</span></span><br><span class="line">    OnAllyDamaged = <span class="number">27</span>, <span class="comment">// 友方受伤时</span></span><br><span class="line">    OnAllyHeal = <span class="number">28</span>,    <span class="comment">// 友方承受治疗时</span></span><br><span class="line">    OnEnemyDamaged = <span class="number">29</span>,<span class="comment">// 敌方受伤时</span></span><br><span class="line">    OnEnemyHeal = <span class="number">30</span>,   <span class="comment">// 敌方承受治疗时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> BuffType : <span class="built_in">byte</span></span><br><span class="line">&#123;</span><br><span class="line">    Buff,   <span class="comment">// 正常Buff，可被驱散</span></span><br><span class="line">    Mark,   <span class="comment">// 印记，不可被驱散</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-角色定义"><a href="#1-1-角色定义" class="headerlink" title="1.1&#x2F;角色定义"></a>1.1&#x2F;角色定义</h4><p>分析我们先前的系统设计，对于<code>角色</code>，我们大体能得出以下图</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assets\Scripts\DataDef\RoleData.cs</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoleData</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 基础属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Atk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Def;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Spd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Crit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> CritDmg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Hit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 技能配置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深拷贝,将Data转换为实际的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">ToRole</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用对应的函数生成并返回</span></span><br><span class="line">        Role ret = <span class="keyword">new</span> Role(Hp, Atk, Def, Spd, Crit, CritDmg, Hit, Res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assets\Scripts\DataDef\Role.cs</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 实际的Role</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Role</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Id,只会在战斗中生成</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基础属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hpMax;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> attack;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> defense;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speed;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> critChance;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> critDamage;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hitChance;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> resistance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倍率部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> attackRate;        <span class="comment">// 攻击力倍率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> defenseRate;       <span class="comment">// 防御倍率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speedRate;         <span class="comment">// 速度倍率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> critRate;          <span class="comment">// 暴击机率倍率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> critDmgRate;       <span class="comment">// 暴击伤害倍率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hitRate;           <span class="comment">// 命中倍率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> resistanceRate;    <span class="comment">// 抵抗倍率</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 固定部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> attackExtra;       <span class="comment">// 额外攻击力</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> defenseExtra;      <span class="comment">// 额外防御</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speedExtra;        <span class="comment">// 额外速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> critExtra;         <span class="comment">// 额外暴击机率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> critDmgExtra;      <span class="comment">// 额外暴击伤害</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hitExtra;          <span class="comment">// 额外效果命中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> resistanceExtra;   <span class="comment">// 额外效果抵抗</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Skill&gt; skillList;   <span class="comment">// 角色的技能</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Skill curSkill;          <span class="comment">// 当前回合释放的技能</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; targetList;   <span class="comment">// 技能选择的目标</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 给全数据生成的Role对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hpMax&quot;&gt;</span>初始生命值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;attack&quot;&gt;</span>攻击力<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;defense&quot;&gt;</span>防御<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;speed&quot;&gt;</span>速度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;critChance&quot;&gt;</span>暴击几率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;critDamage&quot;&gt;</span>暴击伤害<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hitChance&quot;&gt;</span>效果命中<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;resistance&quot;&gt;</span>效果抵抗<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;attackRate&quot;&gt;</span>攻击倍率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;defenseRate&quot;&gt;</span>防御倍率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;speedRate&quot;&gt;</span>速度倍率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;critRate&quot;&gt;</span>暴击机率倍率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;critDmgRate&quot;&gt;</span>暴击伤害倍率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hitRate&quot;&gt;</span>效果命中倍率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;resistanceRate&quot;&gt;</span>效果抵抗倍率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;attackExtra&quot;&gt;</span>额外攻击<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;defenseExtra&quot;&gt;</span>额外防御<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;speedExtra&quot;&gt;</span>额外速度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;critExtra&quot;&gt;</span>额外暴击<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;critDmgExtra&quot;&gt;</span>额外爆伤<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hitExtra&quot;&gt;</span>额外效果命中<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;resistanceExtra&quot;&gt;</span>额外效果抵抗<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span>(<span class="params"><span class="built_in">float</span> hpMax, <span class="built_in">float</span> attack, <span class="built_in">float</span> defense, <span class="built_in">float</span> speed, <span class="built_in">float</span> critChance, <span class="built_in">float</span> critDamage, <span class="built_in">float</span> hitChance, <span class="built_in">float</span> resistance, <span class="built_in">float</span> attackRate, <span class="built_in">float</span> defenseRate, <span class="built_in">float</span> speedRate, <span class="built_in">float</span> critRate, <span class="built_in">float</span> critDmgRate, <span class="built_in">float</span> hitRate, <span class="built_in">float</span> resistanceRate, <span class="built_in">float</span> attackExtra, <span class="built_in">float</span> defenseExtra, <span class="built_in">float</span> speedExtra, <span class="built_in">float</span> critExtra, <span class="built_in">float</span> critDmgExtra, <span class="built_in">float</span> hitExtra, <span class="built_in">float</span> resistanceExtra</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.hpMax = hpMax;</span><br><span class="line">        <span class="keyword">this</span>.hp = hpMax;</span><br><span class="line">        <span class="keyword">this</span>.attack = attack;</span><br><span class="line">        <span class="keyword">this</span>.defense = defense;</span><br><span class="line">        <span class="keyword">this</span>.speed = speed;</span><br><span class="line">        <span class="keyword">this</span>.critChance = critChance;</span><br><span class="line">        <span class="keyword">this</span>.critDamage = critDamage;</span><br><span class="line">        <span class="keyword">this</span>.hitChance = hitChance;</span><br><span class="line">        <span class="keyword">this</span>.resistance = resistance;</span><br><span class="line">        <span class="keyword">this</span>.attackRate = attackRate;</span><br><span class="line">        <span class="keyword">this</span>.defenseRate = defenseRate;</span><br><span class="line">        <span class="keyword">this</span>.speedRate = speedRate;</span><br><span class="line">        <span class="keyword">this</span>.critRate = critRate;</span><br><span class="line">        <span class="keyword">this</span>.critDmgRate = critDmgRate;</span><br><span class="line">        <span class="keyword">this</span>.hitRate = hitRate;</span><br><span class="line">        <span class="keyword">this</span>.resistanceRate = resistanceRate;</span><br><span class="line">        <span class="keyword">this</span>.attackExtra = attackExtra;</span><br><span class="line">        <span class="keyword">this</span>.defenseExtra = defenseExtra;</span><br><span class="line">        <span class="keyword">this</span>.speedExtra = speedExtra;</span><br><span class="line">        <span class="keyword">this</span>.critExtra = critExtra;</span><br><span class="line">        <span class="keyword">this</span>.critDmgExtra = critDmgExtra;</span><br><span class="line">        <span class="keyword">this</span>.hitExtra = hitExtra;</span><br><span class="line">        <span class="keyword">this</span>.resistanceExtra = resistanceExtra;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 只有初始数据生成的Role对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hpMax&quot;&gt;</span>初始生命<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;attack&quot;&gt;</span>攻击力<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;defense&quot;&gt;</span>防御<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;speed&quot;&gt;</span>速度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;critChance&quot;&gt;</span>暴击几率<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;critDamage&quot;&gt;</span>暴击伤害<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hitChance&quot;&gt;</span>效果命中<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;resistance&quot;&gt;</span>效果抵抗<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span>(<span class="params"><span class="built_in">float</span> hpMax, <span class="built_in">float</span> attack, <span class="built_in">float</span> defense, <span class="built_in">float</span> speed, <span class="built_in">float</span> critChance, <span class="built_in">float</span> critDamage, <span class="built_in">float</span> hitChance, <span class="built_in">float</span> resistance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.hpMax = hpMax;</span><br><span class="line">        <span class="keyword">this</span>.hp = hpMax;</span><br><span class="line">        <span class="keyword">this</span>.attack = attack;</span><br><span class="line">        <span class="keyword">this</span>.defense = defense;</span><br><span class="line">        <span class="keyword">this</span>.speed = speed;</span><br><span class="line">        <span class="keyword">this</span>.critChance = critChance;</span><br><span class="line">        <span class="keyword">this</span>.critDamage = critDamage;</span><br><span class="line">        <span class="keyword">this</span>.hitChance = hitChance;</span><br><span class="line">        <span class="keyword">this</span>.resistance = resistance;</span><br><span class="line">        <span class="keyword">this</span>.attackRate = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.defenseRate = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.speedRate = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.critRate = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.critDmgRate = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.hitRate = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.resistanceRate = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.attackExtra = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.defenseExtra = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.speedExtra = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.critExtra = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.critDmgExtra = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.hitExtra = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">this</span>.resistanceExtra = <span class="number">0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 角色的行为</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放当前回合选择的技能</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否成功释放<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CastCurSkill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        curSkill.Cast(<span class="keyword">this</span>, targetList);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 获取计算好的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取计算好的速度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">GetSpeed</span>()</span> &#123; <span class="keyword">return</span> (<span class="keyword">this</span>.speed + <span class="keyword">this</span>.speedExtra) * (<span class="number">1f</span> + <span class="keyword">this</span>.speedRate); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-2-技能定义"><a href="#1-2-技能定义" class="headerlink" title="1.2&#x2F;技能定义"></a>1.2&#x2F;技能定义</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SkillData</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Skill</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Cast</span>(<span class="params">Role caster, List&lt;Role&gt; targets</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-3-Buff定义"><a href="#1-3-Buff定义" class="headerlink" title="1.3&#x2F;Buff定义"></a>1.3&#x2F;Buff定义</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BuffData</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> buffName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BuffTime triggerTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Buff</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-行动条管理"><a href="#1-4-行动条管理" class="headerlink" title="1.4&#x2F;行动条管理"></a>1.4&#x2F;行动条管理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 将行动条单独封装成一个类,好操作</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ActStrip</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在场的所有单位</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ActUnit&gt; allUnits;</span><br><span class="line">    <span class="comment">// 行动条上的所有单位</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ActUnit&gt; units;</span><br><span class="line">    <span class="comment">// 行动条的长度,由一速决定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> actLength;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActStrip</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.allUnits = <span class="keyword">new</span> List&lt;ActUnit&gt;();</span><br><span class="line">        <span class="keyword">this</span>.units = <span class="keyword">new</span> List&lt;ActUnit&gt;();</span><br><span class="line">        <span class="keyword">this</span>.actLength = <span class="number">0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根据给定角色生成行动队列</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;roles&quot;&gt;</span>参与战斗的角色<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GenerateActStrip</span>(<span class="params">List&lt;Role&gt; roles</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> tempSpeed = <span class="number">0f</span>;   <span class="comment">// 最快一速</span></span><br><span class="line">        <span class="keyword">foreach</span> (Role role <span class="keyword">in</span> roles)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(role.speed &gt; tempSpeed)</span><br><span class="line">                tempSpeed = role.speed;</span><br><span class="line">            <span class="keyword">this</span>.allUnits.Add(<span class="keyword">new</span> ActUnit(role));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.actLength = tempSpeed;</span><br><span class="line">        <span class="comment">// 根据curProgress排序</span></span><br><span class="line">        <span class="keyword">this</span>.allUnits.Sort((ActUnit x, ActUnit y) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Role roleX = BattleManager.GetRoleById(x.roleId);</span><br><span class="line">            Role roleY = BattleManager.GetRoleById(y.roleId);</span><br><span class="line">            <span class="keyword">return</span> roleX.speed.CompareTo(roleY.speed);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.units = allUnits;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 行动至下一个角色并返回它</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>行动条推进后进行行动的角色<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">ActProgress</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 只用看行动条的第一个就知道整体的情况了</span></span><br><span class="line">        ActUnit unit = <span class="keyword">this</span>.units[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (unit.curProgress &gt;= actLength)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 复制一份到队尾,删除unit并返回这个角色</span></span><br><span class="line">            unit.Duplicate(unit.curProgress - actLength);</span><br><span class="line">            Role ret = BattleManager.GetRoleById(unit.roleId);</span><br><span class="line">            units.Remove(unit);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 所有人都按照自己的速度行动</span></span><br><span class="line">            <span class="keyword">foreach</span>(ActUnit u <span class="keyword">in</span> units)</span><br><span class="line">            &#123;</span><br><span class="line">                Role role = BattleManager.GetRoleById(u.roleId);</span><br><span class="line">                <span class="keyword">if</span>(role != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    u.curProgress += role.GetSpeed();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 行动完递归调用一次</span></span><br><span class="line">            <span class="keyword">return</span> ActProgress();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ActUnit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在本场战斗中的唯一Id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> roleId = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当前位于行动条的哪个位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> curProgress;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActUnit</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.roleId = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.curProgress = <span class="number">0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始生成角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActUnit</span>(<span class="params">Role role</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读取角色的Id</span></span><br><span class="line">        <span class="keyword">this</span>.roleId = role.Id;</span><br><span class="line">        <span class="keyword">this</span>.curProgress = role.speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成同一个单位的不同速度副本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActUnit <span class="title">Duplicate</span>(<span class="params"><span class="built_in">float</span> extraProgress</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.roleId == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;复制了一个空目标&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.curProgress = extraProgress;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-5-战斗管理器"><a href="#1-5-战斗管理器" class="headerlink" title="1.5&#x2F;战斗管理器"></a>1.5&#x2F;战斗管理器</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assets\Scripts\System\Battle\BattleManager.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BattleManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 所有的等待都用这个来实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> WaitForSeconds _delaySeconds = <span class="keyword">new</span> WaitForSeconds(<span class="number">0.3f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 战斗相关数据</span></span><br><span class="line">    <span class="comment">// 存放用来深拷贝的双方数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 玩家队伍的角色数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    List&lt;RoleData&gt; playerTeam;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 敌方队伍的角色数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    List&lt;RoleData&gt; enemyTeam;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 玩家队伍的角色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Role&gt; playerRoles;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 敌方队伍的角色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Role&gt; enemyRoles;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当前回合正在行动的角色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    Role curActRole;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当前的行动队列和之后的行动队列</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    ActStrip actStrip;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当前战斗的状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> BattleState _battleState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(Fight(() =&gt; &#123; Debug.Log(<span class="string">&quot;战斗胜利&quot;</span>); &#125;, () =&gt; &#123; Debug.Log(<span class="string">&quot;战斗失败&quot;</span>); &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">IEnumerator <span class="title">Fight</span>(<span class="params">Action winCallback, Action loseCallback</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从这里开始就是进入战斗逻辑的初始化部分</span></span><br><span class="line">        <span class="keyword">foreach</span>(RoleData playerData <span class="keyword">in</span> playerTeam)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 初始化玩家阵营的人物</span></span><br><span class="line">            playerRoles.Add(playerData.ToRole());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (RoleData enemyData <span class="keyword">in</span> enemyTeam)</span><br><span class="line">        &#123;</span><br><span class="line">            enemyRoles.Add(enemyData.ToRole());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取所有单位的速度,初始化行动条</span></span><br><span class="line">        actStrip.GenerateActStrip(playerRoles.Concat(enemyRoles).ToList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化战斗结果</span></span><br><span class="line">        <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 战斗主循环</span></span><br><span class="line">        <span class="keyword">while</span> ((<span class="built_in">int</span>)_battleState &lt; <span class="number">5</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理先机事件,只有刚进入战斗会触发</span></span><br><span class="line">            <span class="keyword">if</span> (_battleState == BattleState.Enter)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span>遍历单位的先机相关属性</span></span><br><span class="line">                Debug.Log(<span class="string">&quot;触发了所有人的先机效果&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span>(_battleState == BattleState.Acting) &#123; <span class="keyword">yield</span> <span class="keyword">return</span> _delaySeconds; &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = CheckBattleResult();</span><br><span class="line">            <span class="keyword">if</span>(result == <span class="number">1</span>) &#123;<span class="keyword">yield</span> <span class="keyword">return</span> winCallback; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(result == <span class="number">2</span>) &#123; <span class="keyword">yield</span> <span class="keyword">return</span> loseCallback; &#125;</span><br><span class="line"></span><br><span class="line">            curActRole = actStrip.ActProgress();</span><br><span class="line">            _battleState = BattleState.BeforeAct;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 回合前BUFF检测</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(playerRoles.Contains(curActRole) &amp;&amp; _battleState == BattleState.BeforeAct)</span><br><span class="line">            &#123;</span><br><span class="line">                _battleState = BattleState.SelectAct;</span><br><span class="line">                <span class="comment">// 等待玩家操作</span></span><br><span class="line">                <span class="keyword">while</span>(_battleState == BattleState.SelectAct) &#123; <span class="keyword">yield</span> <span class="keyword">return</span> _delaySeconds; &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(enemyRoles.Contains(curActRole) &amp;&amp; _battleState == BattleState.BeforeAct)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 调用敌人的AI选择技能</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 技能演出</span></span><br><span class="line">            <span class="keyword">if</span>(curActRole.curSkill != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                curActRole.CastCurSkill();</span><br><span class="line">                <span class="keyword">while</span>(_battleState == BattleState.Acting) &#123; <span class="keyword">yield</span> <span class="keyword">return</span> _delaySeconds; &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _battleState = BattleState.AfterAct;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 行动后的逻辑</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是否满足结束条件</span></span><br><span class="line">            result = CheckBattleResult();</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="number">1</span>) &#123; <span class="keyword">yield</span> <span class="keyword">return</span> winCallback; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">2</span>) &#123; <span class="keyword">yield</span> <span class="keyword">return</span> loseCallback; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 检查当前是否满足结束条件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>0 - 还没结束，1 - 胜利，2 - 失败<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CheckBattleResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 玩家阵营全部阵亡 -- 失败</span></span><br><span class="line">        <span class="keyword">if</span>(playerRoles.Count == <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">        <span class="comment">// 敌方阵营全部阵亡 -- 胜利</span></span><br><span class="line">        <span class="keyword">if</span>(enemyRoles.Count == <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="comment">// 否则就是还没结束</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 外界获取数据的接口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根据角色的Id获取角色对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;Id&quot;&gt;</span>角色的Id<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回角色对象,失败返回null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Role <span class="title">GetRoleById</span>(<span class="params"><span class="built_in">int</span> Id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (Role role <span class="keyword">in</span> playerRoles)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (role.Id == Id)&#123; <span class="keyword">return</span> role; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span>(Role role <span class="keyword">in</span> enemyRoles)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (role.Id == Id) &#123; <span class="keyword">return</span> role; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">从最简单的回合制逻辑开始</summary>
    
    
    
    <category term="RE:从0开始的RPG游戏制作" scheme="https://mralridge.github.io/categories/RE-%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84RPG%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="Unity3D" scheme="https://mralridge.github.io/tags/Unity3D/"/>
    
    <category term="游戏开发" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="玩法设计" scheme="https://mralridge.github.io/tags/%E7%8E%A9%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="C#" scheme="https://mralridge.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>(0) 准备阶段 - RE:从0开始的RPG游戏制作</title>
    <link href="https://mralridge.github.io/2024/06/26/RE-%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84RPG%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    <id>https://mralridge.github.io/2024/06/26/RE-%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84RPG%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/</id>
    <published>2024-06-26T06:57:38.000Z</published>
    <updated>2024-06-27T09:48:01.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-序言"><a href="#0-序言" class="headerlink" title="0&#x2F;序言"></a>0&#x2F;序言</h3><p>说起来Unity3D学了这么长时间，还没认真做过什么东西，既然目前的工作与回合制RPG游戏有重合，并且这一年多也玩了不少JRPG之类的回合制游戏，暂且就先试试看吧。</p><p>这个系列不只是只有编程方面的教学，我会试着尽量以制作人的角度来考虑各种问题，同时这也是我自己项目的一个开发历程。</p><h3 id="1-项目策划"><a href="#1-项目策划" class="headerlink" title="1&#x2F;项目策划"></a>1&#x2F;项目策划</h3><p>这个项目我就准备仿照阴阳师来做了</p>]]></content>
    
    
    <summary type="html">或许这一次能够真真正正的做到最后</summary>
    
    
    
    <category term="RE:从0开始的RPG游戏制作" scheme="https://mralridge.github.io/categories/RE-%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84RPG%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="Unity3D" scheme="https://mralridge.github.io/tags/Unity3D/"/>
    
    <category term="游戏开发" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="玩法设计" scheme="https://mralridge.github.io/tags/%E7%8E%A9%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>半个小时之后如何更新你的博客</title>
    <link href="https://mralridge.github.io/2024/06/26/%E5%8D%8A%E4%B8%AA%E5%B0%8F%E6%97%B6%E4%B9%8B%E5%90%8E%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://mralridge.github.io/2024/06/26/%E5%8D%8A%E4%B8%AA%E5%B0%8F%E6%97%B6%E4%B9%8B%E5%90%8E%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-06-26T02:13:22.000Z</published>
    <updated>2024-06-28T08:58:38.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在上一章,我们已经完成了博客的搭建,这一章就是博客的日常操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="很简单的Hexo建站教程" scheme="https://mralridge.github.io/categories/%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84Hexo%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://mralridge.github.io/tags/Hexo/"/>
    
    <category term="杂项" scheme="https://mralridge.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>记一个pairs迭代器的坑</title>
    <link href="https://mralridge.github.io/2024/06/25/%E8%AE%B0%E4%B8%80%E4%B8%AApairs%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%9D%91/"/>
    <id>https://mralridge.github.io/2024/06/25/%E8%AE%B0%E4%B8%80%E4%B8%AApairs%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%9D%91/</id>
    <published>2024-06-25T01:48:14.000Z</published>
    <updated>2024-06-28T08:59:54.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-碎碎念"><a href="#0-碎碎念" class="headerlink" title="0&#x2F;碎碎念"></a>0&#x2F;碎碎念</h3><p>由于目前的项目采用的战利品掉落被我设计成每个地图都不一样,之前的功能已经做了每个地图对应的战利品表了,处于方便维护的考虑,这次新增的战利品表也要每个地图都做一个.但是每个表涉及的战利品都非常的多,所以我就想先把所有的表用字符串输出出来再手动复制过去,毕竟这些表只有概率字段是会变的.</p><h3 id="1-第一次尝试"><a href="#1-第一次尝试" class="headerlink" title="1&#x2F;第一次尝试"></a>1&#x2F;第一次尝试</h3><p>所以我就写了下面这个代码来生成每层的表</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">format</span> = <span class="string">[[</span></span><br><span class="line"><span class="string">[3] = &#123;</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=&#123;BASE&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=&#123;RAND1&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=&#123;RAND2&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=&#123;RAND3&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=&#123;RAND4&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=&#123;RAND5&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=&#123;RAND6&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=&#123;RAND7&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=&#123;RAND8&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=&#123;RAND9&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=&#123;RAND10&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=&#123;RAND11&#125;&#125;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> baseRand = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> otherRand = &#123;</span><br><span class="line">    <span class="number">30</span>,<span class="number">40</span>,<span class="number">90</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">90</span>,<span class="number">90</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">36</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> i ~= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        baseRand = baseRand - <span class="number">11</span></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">            value = value + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> tmpStr = <span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="built_in">format</span>, <span class="string">&quot;&#123;BASE&#125;&quot;</span>, baseRand)</span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">        tmpStr = <span class="built_in">string</span>.<span class="built_in">gsub</span>(tmpStr, <span class="string">&quot;&#123;RAND&quot;</span>..<span class="built_in">tostring</span>(index)..<span class="string">&quot;&#125;&quot;</span>, value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(tmpStr)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然而得到的运行结果却是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[3] = &#123;</span><br><span class="line">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=5000&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=30&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=5&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        [3] = &#123;</span><br><span class="line">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=4989&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=30&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=5&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;...&gt;</span><br><span class="line">        [3] = &#123;</span><br><span class="line">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=4615&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=30&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=5&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到除了第一个nil物品的概率发生了改变,其他的都没有变化.翻来覆去看了5分钟,发现问题出在这里</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">    value = value + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里我直接修改了迭代器返回的对象,但是调试的过程中发现,<code>index</code>和<code>value</code>都只是迭代器返回的一个值,而不是对表中元素的引用,所以这里的修改并不会改变表中的值.</p><h3 id="2-第二次尝试"><a href="#2-第二次尝试" class="headerlink" title="2&#x2F;第二次尝试"></a>2&#x2F;第二次尝试</h3><p>修改成以下代码就可以了</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">format</span> = <span class="string">[[</span></span><br><span class="line"><span class="string">[3] = &#123;</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=&#123;BASE&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=&#123;RAND1&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=&#123;RAND2&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=&#123;RAND3&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=&#123;RAND4&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=&#123;RAND5&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=&#123;RAND6&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=&#123;RAND7&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=&#123;RAND8&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=&#123;RAND9&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=&#123;RAND10&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=&#123;RAND11&#125;&#125;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> baseRand = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> otherRand = &#123;</span><br><span class="line">    <span class="number">30</span>,<span class="number">40</span>,<span class="number">90</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">90</span>,<span class="number">90</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">36</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> i ~= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        baseRand = baseRand - <span class="number">11</span></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">            otherRand[index] = value + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> tmpStr = <span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="built_in">format</span>, <span class="string">&quot;&#123;BASE&#125;&quot;</span>, baseRand)</span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">        tmpStr = <span class="built_in">string</span>.<span class="built_in">gsub</span>(tmpStr, <span class="string">&quot;&#123;RAND&quot;</span>..<span class="built_in">tostring</span>(index)..<span class="string">&quot;&#125;&quot;</span>, value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(tmpStr)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[3] = &#123;</span><br><span class="line">    &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=5000&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=30&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=90&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=40&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=25&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=5&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[3] = &#123;</span><br><span class="line">    &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=4989&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=31&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=41&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=91&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=41&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=26&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=26&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=91&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=91&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=41&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=26&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=6&#125;,</span><br><span class="line">&#125;</span><br><span class="line">    &lt;...&gt;</span><br><span class="line">[3] = &#123;</span><br><span class="line">    &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=4615&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=65&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=75&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=125&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=75&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=60&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=60&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=125&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=125&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=75&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=60&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到,<code>otherRand</code>表中的数值也正常地发生了改变</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工作经验" scheme="https://mralridge.github.io/categories/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="Lua" scheme="https://mralridge.github.io/tags/Lua/"/>
    
    <category term="踩坑" scheme="https://mralridge.github.io/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>浅入浅出游戏引擎笔记（一）</title>
    <link href="https://mralridge.github.io/2024/06/24/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://mralridge.github.io/2024/06/24/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-06-24T06:14:45.000Z</published>
    <updated>2024-06-29T07:26:58.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-openGL环境搭建"><a href="#0-openGL环境搭建" class="headerlink" title="0&#x2F;openGL环境搭建"></a>0&#x2F;openGL环境搭建</h3><p>在【从0开始手搓游戏引擎】系列里面，图形API是自己手动调用的，刚开始Windows窗体和DX11还好，到了openGL真的就是噩梦，虽然说openGL的跨平台做的非常好，但是作为初学者上来就接触这么多代码还是有点发怵。索性可以通过glfw可以通过几行代码生成整个OpenGL环境，果然学一门东西还是要从简单的开始入手，没有几个人能够撑下来“这是攻击，这是防御，这是大树守卫环节”。</p><p>下面是涉及到的代码，我尽量用我的理解写下来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glad/gl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLFW_INCLUDE_NONE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GLFWwindow* window;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化glfw */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">glfwInit</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建一个Window 和 OpenGL上下文 */</span></span><br><span class="line">    window = <span class="built_in">glfwCreateWindow</span>(<span class="number">960</span>, <span class="number">640</span>, <span class="string">&quot;Hello World&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!window)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建失败就退出</span></span><br><span class="line">        <span class="built_in">glfwTerminate</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 激活上面创建的OpenGL上下文 */</span></span><br><span class="line">    <span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">    <span class="built_in">gladLoadGL</span>(glfwGetProcAddress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 进入游戏引擎主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Render here */</span></span><br><span class="line">        <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);</span><br><span class="line">        <span class="built_in">glClearColor</span>(<span class="number">49.f</span>/<span class="number">255</span>,<span class="number">77.f</span>/<span class="number">255</span>,<span class="number">121.f</span>/<span class="number">255</span>,<span class="number">1.f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Swap front and back buffers */</span></span><br><span class="line">        <span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理鼠标 键盘事件 */</span></span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大体表述的处理流程就是下面这样：</p><p><img src="https://www.thisisgame.com.cn/md/cpp-game-engine-book/imgs/opengl_dev_env/dev_env_configure/opengl_flow.jpg" alt="基本流程"></p><h3 id="1-绘制图形"><a href="#1-绘制图形" class="headerlink" title="1&#x2F;绘制图形"></a>1&#x2F;绘制图形</h3><table><thead><tr><th align="center">文件名称</th><th align="center">文件描述</th></tr></thead><tbody><tr><td align="center">main.cpp</td><td align="center">主逻辑</td></tr><tr><td align="center">VertexData.h</td><td align="center">顶点数据(坐标、颜色)</td></tr><tr><td align="center">ShaderSource.h</td><td align="center">Shader代码(顶点Shader和片段Shader)</td></tr></tbody></table><p><code>VertexData.h</code>用来存放需要绘制的三角形相关顶点数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> UNTITLED_VERTEXDATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNTITLED_VERTEXDATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glm/glm.hpp&gt;</span></span></span><br><span class="line"><span class="comment">// 顶点的坐标信息</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> glm::vec3 kPositions[<span class="number">3</span>] = &#123;</span><br><span class="line">        glm::vec3&#123; <span class="number">-1.0f</span>, <span class="number">-1.0f</span>,<span class="number">0.0f</span>&#125;,</span><br><span class="line">        glm::vec3&#123;  <span class="number">1.0f</span>, <span class="number">-1.0f</span>,<span class="number">0.0f</span>&#125;,</span><br><span class="line">        glm::vec3&#123;   <span class="number">0.f</span>,  <span class="number">1.0f</span>,<span class="number">0.0f</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 顶点的颜色信息</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> glm::vec4 kColors[<span class="number">3</span>] = &#123;</span><br><span class="line">        glm::vec4&#123; <span class="number">1.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> ,<span class="number">1.f</span>&#125;,</span><br><span class="line">        glm::vec4&#123; <span class="number">0.f</span>, <span class="number">1.f</span>, <span class="number">0.f</span> ,<span class="number">1.f</span>&#125;,</span><br><span class="line">        glm::vec4&#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">1.f</span> ,<span class="number">1.f</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//UNTITLED_VERTEXDATA_H</span></span></span><br></pre></td></tr></table></figure><p>然后是着色器的代码，由于本人对着色器仍然处于一知半解的状态，所以就只贴代码.大体来说就是告诉显卡顶点该怎么绘制，顶点间的片段该怎么绘制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by captain on 2021/3/25.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> UNTITLED_SHADERSOURCE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNTITLED_SHADERSOURCE_H</span></span><br><span class="line"><span class="comment">//顶点着色器代码</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* vertex_shader_text =</span><br><span class="line">        <span class="string">&quot;#version 110\n&quot;</span></span><br><span class="line">        <span class="string">&quot;uniform mat4 u_mvp;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;attribute  vec3 a_pos;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;attribute  vec4 a_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;varying vec4 v_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;    gl_Position = u_mvp * vec4(a_pos, 1.0);\n&quot;</span></span><br><span class="line">        <span class="string">&quot;    v_color = a_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"><span class="comment">//片段着色器代码</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* fragment_shader_text =</span><br><span class="line">        <span class="string">&quot;#version 110\n&quot;</span></span><br><span class="line">        <span class="string">&quot;varying vec4 v_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;    gl_FragColor = v_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//UNTITLED_SHADERSOURCE_H</span></span></span><br></pre></td></tr></table></figure><p>看完之后,我大致的理解就是下图:</p><p><img src="https://s21.ax1x.com/2024/06/24/pksSAeS.png" alt="着色器绘制图形的基本过程"></p><p>Shader本质上来说就是运行在GPU上面的程序</p><blockquote><p>目前市面上的手机，很大一部分仍然是OpenGL ES3.0的版本或更低。</p><p>Computer Shader在OpenGL ES 3.1版本才开始支持。</p><p>Geometry Shader在OpenGL ES 3.2版本才开始支持。</p></blockquote><h3 id="2-顶点着色器"><a href="#2-顶点着色器" class="headerlink" title="2&#x2F;顶点着色器"></a>2&#x2F;顶点着色器</h3><blockquote><p>顶点着色器的功能就是：<code>对输入的顶点坐标进行处理，然后再输出。</code></p></blockquote><h4 id="版本限定"><a href="#版本限定" class="headerlink" title="版本限定"></a>版本限定</h4><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 110</span></span><br></pre></td></tr></table></figure><p>每个Shader开头的语句,就是版本限定,也就是说如果你的设备不支持这个版本,那么这个Shader将直接被跳过</p><h4 id="统一变量与属性变量以及输出变量"><a href="#统一变量与属性变量以及输出变量" class="headerlink" title="统一变量与属性变量以及输出变量"></a>统一变量与属性变量以及输出变量</h4><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVPMatrix;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> a_pos;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_color;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_color;</span><br></pre></td></tr></table></figure><p>由于Shader是运行在GPU上的程序,而GPU是并行运算的.二者的区别就在于一组顶点如果分摊到GPU的逻辑单元,如果每个逻辑单元处理的是相同的数据,那么就称之为统一变量,反之就是属性变量</p><p>变量的修饰有点类似于OOP中的public与private</p><p>attribute所修饰的属性变量每执行一次Shader就需要被重新赋值</p><blockquote><p>输出变量由varying关键字修饰，用于从顶点着色器，传递数据到片段着色器。</p><p>每个Shader都有入口函数 main()，顶点Shader主要工作就是：计算坐标。</p><p>得到坐标计算结果后，传给内置变量 gl_Position。</p><p>GPU拿到gl_Position，执行裁剪。</p></blockquote><h3 id="3-片段着色器"><a href="#3-片段着色器" class="headerlink" title="3&#x2F;片段着色器"></a>3&#x2F;片段着色器</h3><blockquote><p>片段着色器(像素着色器)的功能就是：输出颜色。</p><p>片段着色器(像素着色器)也是并行的，不过执行的次数不是顶点个数，而是屏幕像素个数。</p><p>举例绘制一个960x540的长方形，每一个像素点的颜色，都是通过执行一次片段着色器来得到，那么GPU需要执行960x540次。</p></blockquote><p>顶点着色器的输出变量,就是片段着色器的输入变量</p><blockquote><p>片段着色器一般都是输出到<code>gl_FragColor</code>这个内置变量。<br>所有从顶点着色器输出到片段着色器的数据，都会插值！</p></blockquote><h3 id="4-UV"><a href="#4-UV" class="headerlink" title="4&#x2F;UV"></a>4&#x2F;UV</h3><blockquote><p>UV坐标指的是顶点对应在图片的哪个位置</p></blockquote><p>UV的坐标范围是[0f, 1f],UV映射就是顶点坐标和贴图对应起来的操作.</p><p>贴图文件大致分为三种:</p><ul><li>没有压缩的图片格式 bmp</li><li>CPU压缩的图片格式 无损压缩:png,有损压缩:jpg</li><li>显卡支持的图片格式</li></ul><p>贴图的显示方式差不多就是下面这样:</p><p><img src="https://s21.ax1x.com/2024/06/24/pks9pKP.png" alt="贴图的渲染过程"></p><h3 id="5-杂项笔记"><a href="#5-杂项笔记" class="headerlink" title="5&#x2F;杂项笔记"></a>5&#x2F;杂项笔记</h3><p>在GPU上创建对象，都是分三步，调用3个API：</p><ul><li><code>glGenxxxx</code> 在GPU上进行创建xx对象</li><li><code>glBindxxx</code> 将xx对象指定为类型</li><li><code>glxxxxxxx</code> 上传数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="浅入浅出游戏引擎" scheme="https://mralridge.github.io/categories/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="c++" scheme="https://mralridge.github.io/tags/c/"/>
    
    <category term="游戏引擎" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="浅入浅出" scheme="https://mralridge.github.io/tags/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>如何在半个小时以内用Hexo完成博客网站的搭建</title>
    <link href="https://mralridge.github.io/2024/06/21/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%8A%E4%B8%AA%E5%B0%8F%E6%97%B6%E4%BB%A5%E5%86%85%E7%94%A8Hexo%E5%AE%8C%E6%88%90%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://mralridge.github.io/2024/06/21/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%8A%E4%B8%AA%E5%B0%8F%E6%97%B6%E4%BB%A5%E5%86%85%E7%94%A8Hexo%E5%AE%8C%E6%88%90%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2024-06-21T08:48:53.000Z</published>
    <updated>2024-06-27T09:48:01.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-一些废话"><a href="#0-一些废话" class="headerlink" title="0&#x2F;一些废话"></a>0&#x2F;一些废话</h3><p>在我本人折腾了这么多的东西里面，我真正学会了、能够写出教程来的好像就只有用Hexo建站了，所以趁着自己还没忘，把这方面的知识记录下来</p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1&#x2F;准备工作"></a>1&#x2F;准备工作</h3><p>其实Hexo搭建完之后的日常使用很简单，只需要用终端执行一些命令、文章就是正常的markdown文件，所以理论上来说，准备一个终端和一个MD编辑器就可以。</p><p>但是呢，配置的过程中又少不了跟yml这样的文件打交道，简单的文本编辑软件没有代码高亮实在看的难受，而且来回切换软件对我来说感觉挺麻烦的，所以要我选的话，一个vscode足矣。</p><p>总结下来你要准备以下几样:</p><ul><li>VsCode</li><li>Node.js</li><li>Git</li></ul><h4 id="1-1-VsCode的安装"><a href="#1-1-VsCode的安装" class="headerlink" title="1.1&#x2F;VsCode的安装"></a>1.1&#x2F;VsCode的安装</h4><p>去<a href="https://code.visualstudio.com/" title="点击跳转">这里</a>下载一个适合你所使用平台的vscode，然后无脑下一步即可。</p><h4 id="1-2-NodeJs及其相关组件的安装"><a href="#1-2-NodeJs及其相关组件的安装" class="headerlink" title="1.2&#x2F;NodeJs及其相关组件的安装"></a>1.2&#x2F;NodeJs及其相关组件的安装</h4><p>在<a href="https://nodejs.org/zh-cn" title="点击跳转">这里</a>下载最新版的Node.js，个人感觉这东西的版本差异不是很大，只要是LTS版本一般不会出现什么奇奇怪怪的问题,同样也是无脑下一步即可。</p><p>完成安装之后打开你的终端，输入以下命令来验证安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果正常出现以下结果，则证明这一步你做对了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v20.11.1</span><br><span class="line"></span><br><span class="line">&gt; npm -v</span><br><span class="line">10.2.4</span><br></pre></td></tr></table></figure><blockquote><p>如果你使用powershell出现了这样的报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无法加载文件XXXXXXXXXX.ps1, 因为在此系统上禁止运行脚本</span><br></pre></td></tr></table></figure><p>通过管理员模式打开powershell,然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-executionpolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>在输出中选择<code>[A]全是</code>即可</p></blockquote><p>之后我们来安装Hexo相关的组件</p><p>在终端输入下面的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>等待安装完成过后，输入以下指令来验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现类似下面的输出，则说明安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">hexo: 7.2.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: win32 10.0.19045 undefined</span><br><span class="line">node: 20.11.1</span><br><span class="line">acorn: 8.11.2</span><br><span class="line">ada: 2.7.4</span><br><span class="line">ares: 1.20.1</span><br><span class="line"><span class="built_in">base64</span>: 0.5.1</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">cjs_module_lexer: 1.2.2</span><br><span class="line">cldr: 43.1</span><br><span class="line">icu: 73.2</span><br><span class="line">llhttp: 8.1.1</span><br><span class="line">modules: 115</span><br><span class="line">napi: 9</span><br><span class="line">nghttp2: 1.58.0</span><br><span class="line">nghttp3: 0.7.0</span><br><span class="line">ngtcp2: 0.8.1</span><br><span class="line">openssl: 3.0.13+quic</span><br><span class="line">simdutf: 4.0.4</span><br><span class="line">tz: 2023c</span><br><span class="line">undici: 5.28.3</span><br><span class="line">unicode: 15.0</span><br><span class="line">uv: 1.46.0</span><br><span class="line">uvwasi: 0.0.19</span><br><span class="line">v8: 11.3.244.8-node.17</span><br><span class="line">zlib: 1.2.13.1-motley-5daffc7</span><br></pre></td></tr></table></figure><p>之后我们就可以开始博客的初始化了</p><h3 id="2-博客网站的搭建"><a href="#2-博客网站的搭建" class="headerlink" title="2&#x2F;博客网站的搭建"></a>2&#x2F;博客网站的搭建</h3><p>首先挑选你一个你喜欢的目录来存放我们的博客网站，打开终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>之后hexo便会在当前目录生成所必须的文件，当出现<code>INFO Start blogging with Hexo!</code>时，则代表网站初始化成功</p><p>此时我们输入<code>hexo server</code>便可在本地开启网站，默认情况下，本地博客会在<code>localhost:4000</code>上开启,在浏览器中打开即可访问到我们的博客网站。</p><p>之后你的网站根目录会出现一个<code>_config.yml</code>,这个就是你的网站最基本的配置文件,刚开始,我们只需要注意下面的几个配置.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>         <span class="comment"># 网站的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span>        <span class="comment"># 网站的副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span>     <span class="comment"># 网站的描述文字</span></span><br><span class="line"><span class="attr">keywords:</span>           <span class="comment"># 网站的关键词(暂时可以先不填)</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>    <span class="comment"># 博客的作者名称</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span>        <span class="comment"># 网站的语言,建议改成zh_CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span>        <span class="comment"># 网站的时区</span></span><br></pre></td></tr></table></figure><h3 id="3-部署网站到GithubPages"><a href="#3-部署网站到GithubPages" class="headerlink" title="3&#x2F;部署网站到GithubPages"></a>3&#x2F;部署网站到GithubPages</h3><p>Github Pages是一个免费的静态网页托管服务,如果自己没有服务器的话可以通过这种方式进行托管</p><p>首先进入你的github,新建一个库(Repository),在库的名称这里填写<code>你自己的Github账户名称.github.io</code>,创建完成之后我们就可以开始一键部署了</p><blockquote><p>安装 hexo-deployer-git。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在 _config.yml 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;project&gt;</span></span><br><span class="line">  <span class="comment"># example, https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><p>执行 hexo clean &amp;&amp; hexo deploy 。</p><p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="很简单的Hexo建站教程" scheme="https://mralridge.github.io/categories/%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84Hexo%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://mralridge.github.io/tags/Hexo/"/>
    
    <category term="杂项" scheme="https://mralridge.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>从0开始手搓游戏引擎（一）</title>
    <link href="https://mralridge.github.io/2024/06/20/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%89%8B%E6%90%93%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://mralridge.github.io/2024/06/20/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%89%8B%E6%90%93%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-06-20T09:35:52.000Z</published>
    <updated>2024-06-25T01:07:36.009Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="无关痛痒的一些废话"><a href="#无关痛痒的一些废话" class="headerlink" title="无关痛痒的一些废话"></a>无关痛痒的一些废话</h3><p>该系列是跟着知乎<a href="https://zhuanlan.zhihu.com/p/510064704" title="点击跳转">@文礼</a>大佬的系列教程而写的，由于我本人实在才疏学浅，肯定会有错误的地方，希望写完之后我还能想起来吧。</p><p>由于想起来写这篇文章的时候，我已经速通了图形API部分，并且忘记每个section保存提交，所以这一篇可能会特别长，涵盖大佬一至五节的内容。</p><h3 id="什么是游戏引擎"><a href="#什么是游戏引擎" class="headerlink" title="什么是游戏引擎"></a>什么是游戏引擎</h3><p>为了很方便的理解这个概念，我们不妨想象一下这么一个场景。</p><p>你处于</p><h3 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h3><blockquote><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>我推荐各位充分利用git的checkout功能,在每一章的开始都签出一个新的分支</p><p>这样做的好处有很多</p><p>一是就是当你回顾代码的时候就会发现自己的学习成果.</p><p>二是如果有不明白的地方,直接切换到对应的分支,随时回滚,各个分支的状态都是独立的.</p></blockquote><p>在你的目录下创建一个名为<code>Framework</code>的目录, 这里存放的就是与我们的引擎有关的所有代码。但是我们是通过C&#x2F;C++来实现，所以要在这个目录下面再创建<code>Common</code>与<code>Interface</code>两个目录。<code>Common</code>目录下存放的是引擎的核心代码，而<code>Interface</code>目录下存放的则是我们提前定义的接口, 接口与实现分开放。这样做的好处就是当以后的代码文件变多了，项目仍然有个清晰的目录结构，起码其他人来阅读源码也会方便很多。</p><p>你可以直接用资源管理器做这些操作，当然你也可以用更GEEK一点的方式，在你准备好的目录里面打开终端，依次输入以下指令。</p><p>（由于我的Linux操作水平太低了，等我玩明白Linux之后再补Linux上的命令吧）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir Framework</span><br><span class="line"><span class="built_in">cd</span> Framework</span><br><span class="line">mkdir Common</span><br><span class="line">mkdir Interface</span><br></pre></td></tr></table></figure><p>完成之后你的目录结构应该是这样的:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你准备好的目录</span><br><span class="line">└─Framework</span><br><span class="line">   ├─Common</span><br><span class="line">   └─Interface</span><br></pre></td></tr></table></figure><p>在Interface目录下创建文件<code>Interface.h</code>, 内容如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义alias,提高代码可读性</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Interface class</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> implements public</span></span><br></pre></td></tr></table></figure><p>这里就涉及到了两个知识,<code>#pragma once</code>代表的是这个头文件在包含的时候只会加载编译一次.因为编译器处理<code>include</code>的方式是直接将其在文件中展开,在项目体量变大之后,同一个文件被多次<code>include</code>,而如果这个文件中又<code>include</code>了其他的文件,那么就有可能会出现重复定义的情况,之后编译器就会报错,所以这种会被经常<code>include</code>的文件最好加上这句,省的之后出现问题再来排查变得非常麻烦.</p><p>而定义了<code>Interface</code>与<code>implements</code>主要还是为了区分实例与实现, 像我这样三流水平的码农很长一段时间都没有真正理解下面这段话</p><blockquote><h3 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h3><p>接口是一种规范或合同，它定义了一组方法，但不提供具体实现。接口的主要目的是规定一个类应该具备哪些行为，而不涉及这些行为的具体实现细节。接口中的方法默认是抽象的（在Java中明确声明为public abstract），这意味着它们没有实际的执行体。此外，接口也可以声明常量（默认为public static final），这些常量提供了接口使用者需要遵循的固定值或设定。</p><p>接口的作用在于促进多态性，允许不同的类按照相同的接口规范来实现，这样就可以用统一的方式处理不同类型的对象。一个类可以实现一个或多个接口，从而提供接口所要求行为的具体实现。</p><h3 id="实现-implement"><a href="#实现-implement" class="headerlink" title="实现(implement)"></a>实现(implement)</h3><p>实现指的是一个类按照接口所规定的规范，提供具体的方法实现。当一个类声明它实现了某个接口时，它就必须提供那个接口中所有抽象方法的实现。这确保了接口的每个要求在实现类中都有相应的代码来完成。</p><p>例如，假设有这样一个接口Animal，它定义了一个speak()方法。任何实现这个接口的类，如Dog和Cat，都需要提供自己版本的speak()方法，狗可能会实现为woof()，猫则是meow()。</p></blockquote><p>(严格意义上来说,接口在C++中可以通过虚函数来实现,但是为了代码更清楚直观,我们选择用alias的方式)</p><p>(解释Runtime)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义Runtime Module都应该支持的方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once<span class="comment">// 头文件在编译的时候只处理一次</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Interface.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> My &#123;</span><br><span class="line">Interface IRuntimeModule&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 虚析构函数,防止派生子类只调用基类的析构函数</span></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">IRuntimeModule</span>() &#123;&#125;;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">Initialize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 模块结束后执行</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Finalize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 最小单位刻</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个Runtime的接口定义中,我们定义了四个要实现的行为.</p><ul><li><code>~IRuntimeModule()</code> 虚析构函数</li></ul><h4 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h4><blockquote><p>对于有其他虚函数的类，建议把析构函数也声明为virtual。这是因为如果不这么做，那么当使用基类指针释放派生类的实例的时候，可能导致只调用了基类的析构函数，从而产生memory leak的情况。</p></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>对于大部分系统来说,生命周期内肯定会有初始化与结束,所以这一块我的理解就是在主循环之前执行一次初始化,来准备好主循环所需要的东西.</p><h4 id="Finalize"><a href="#Finalize" class="headerlink" title="Finalize"></a>Finalize</h4><p>这个我就不知道该怎么翻译好了,这一部分看大佬的描述有点像一些oop语言里面的gc过程,在主循环结束之后进行清理善后工作.</p><h4 id="刻"><a href="#刻" class="headerlink" title="刻"></a>刻</h4><p>如果你们有Minecraft玩家的话,<code>刻</code>这个概念应该会很熟悉.简单来说呢,我们可以把游戏引擎看作另一个世界的规则,在我们这个世界上,时间的最小单位是普朗克时间,也就是说,我们的世界是根据普朗克时间来流动的.我们身边发生的每一件事,都可以看作是一个个普朗克时间的结果,也就是由它推动着世界前进.那么到游戏引擎创建的世界中来,游戏世界中的各种物理、数学法则，都是在<code>刻</code>这个过程中运算的，所以可以把这个函数看作是游戏引擎的最小单位.</p><p>既然我们已经定义好了Runtime的接口，接下来就应该到下一层应用层的定义了</p><p>还是在这个目录，创建<code>IApplication.hpp</code>,文件内容如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Interface.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;IRuntimeMoudule.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> My &#123;</span><br><span class="line">Interface IApplication : implements IRuntimeModule</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">Initialize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Finalize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 这个接口用来查询App是否需要退出</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">IsQuit</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们的Application是Runtime的实例，所以要实现<code>IRuntimeModule</code>。而且因为我们要手搓的游戏引擎需要实现跨平台的特性，而不同平台让Application退出的方式是不一样的，所以要在这里定义一个<code>IsQuit()</code>来为退出预留出实现</p><p>至此我们已经完成了基本的接口定义，接下来就是具体的实现了,在<code>Common</code>目录下创建<code>BaseApplication.hpp</code>, 文件内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;IApplication.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> My &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseApplication</span> : implements IApplication</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">Initialize</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Finalize</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 主循环的一个周期 One cycle of the main loop</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">IsQuit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// 标志着App是否需要退出主循环</span></span><br><span class="line"><span class="type">bool</span> m_bQuit;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="从0开始手搓游戏引擎" scheme="https://mralridge.github.io/tags/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%89%8B%E6%90%93%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="c++" scheme="https://mralridge.github.io/tags/c/"/>
    
    <category term="游戏引擎" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>回忆宫殿堂堂复活!</title>
    <link href="https://mralridge.github.io/2024/06/20/%E5%9B%9E%E5%BF%86%E5%AE%AB%E6%AE%BF%E5%A0%82%E5%A0%82%E5%A4%8D%E6%B4%BB/"/>
    <id>https://mralridge.github.io/2024/06/20/%E5%9B%9E%E5%BF%86%E5%AE%AB%E6%AE%BF%E5%A0%82%E5%A0%82%E5%A4%8D%E6%B4%BB/</id>
    <published>2024-06-20T06:24:05.000Z</published>
    <updated>2024-06-20T06:26:14.219Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经过了一系列事情之后,生活逐渐稳定下来了,所以回忆宫殿也要堂堂复活.</p><p>由于目前从事的工作原因,今后更新的文章内容,会更倾向于游戏行业的一些东西,包括最近在学习的游戏引擎底层等.</p><p>本着记录好自己成长的原则,一些生活上的琐事也要在这里记录下来.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
