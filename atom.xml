<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>回忆宫殿</title>
  
  <subtitle>MemoryPalace</subtitle>
  <link href="https://mralridge.github.io/atom.xml" rel="self"/>
  
  <link href="https://mralridge.github.io/"/>
  <updated>2024-06-25T02:01:27.453Z</updated>
  <id>https://mralridge.github.io/</id>
  
  <author>
    <name>F10atingHeart</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一个pairs迭代器的坑</title>
    <link href="https://mralridge.github.io/2024/06/25/%E8%AE%B0%E4%B8%80%E4%B8%AApairs%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%9D%91/"/>
    <id>https://mralridge.github.io/2024/06/25/%E8%AE%B0%E4%B8%80%E4%B8%AApairs%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%9D%91/</id>
    <published>2024-06-25T01:48:14.000Z</published>
    <updated>2024-06-25T02:01:27.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-碎碎念"><a href="#0-碎碎念" class="headerlink" title="0&#x2F;碎碎念"></a>0&#x2F;碎碎念</h3><p>由于目前的项目采用的战利品掉落被我设计成每个地图都不一样,之前的功能已经做了每个地图对应的战利品表了,处于方便维护的考虑,这次新增的战利品表也要每个地图都做一个.但是每个表涉及的战利品都非常的多,所以我就想先把所有的表用字符串输出出来再手动复制过去,毕竟这些表只有概率字段是会变的.</p><h3 id="1-第一次尝试"><a href="#1-第一次尝试" class="headerlink" title="1&#x2F;第一次尝试"></a>1&#x2F;第一次尝试</h3><p>所以我就写了下面这个代码来生成每层的表</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">format</span> = <span class="string">[[</span></span><br><span class="line"><span class="string">[3] = &#123;</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=&#123;BASE&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=&#123;RAND1&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=&#123;RAND2&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=&#123;RAND3&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=&#123;RAND4&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=&#123;RAND5&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=&#123;RAND6&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=&#123;RAND7&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=&#123;RAND8&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=&#123;RAND9&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=&#123;RAND10&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=&#123;RAND11&#125;&#125;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> baseRand = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> otherRand = &#123;</span><br><span class="line">    <span class="number">30</span>,<span class="number">40</span>,<span class="number">90</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">90</span>,<span class="number">90</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">36</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> i ~= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        baseRand = baseRand - <span class="number">11</span></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">            value = value + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> tmpStr = <span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="built_in">format</span>, <span class="string">&quot;&#123;BASE&#125;&quot;</span>, baseRand)</span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">        tmpStr = <span class="built_in">string</span>.<span class="built_in">gsub</span>(tmpStr, <span class="string">&quot;&#123;RAND&quot;</span>..<span class="built_in">tostring</span>(index)..<span class="string">&quot;&#125;&quot;</span>, value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(tmpStr)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然而得到的运行结果却是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[3] = &#123;</span><br><span class="line">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=5000&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=30&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=5&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        [3] = &#123;</span><br><span class="line">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=4989&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=30&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=5&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;...&gt;</span><br><span class="line">        [3] = &#123;</span><br><span class="line">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=4615&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=30&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=40&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=25&#125;,</span><br><span class="line">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=5&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到除了第一个nil物品的概率发生了改变,其他的都没有变化.翻来覆去看了5分钟,发现问题出在这里</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">    value = value + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里我直接修改了迭代器返回的对象,但是调试的过程中发现,<code>index</code>和<code>value</code>都只是迭代器返回的一个值,而不是对表中元素的引用,所以这里的修改并不会改变表中的值.</p><p>修改成以下代码就可以了</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">format</span> = <span class="string">[[</span></span><br><span class="line"><span class="string">[3] = &#123;</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=&#123;BASE&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=&#123;RAND1&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=&#123;RAND2&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=&#123;RAND3&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=&#123;RAND4&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=&#123;RAND5&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=&#123;RAND6&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=&#123;RAND7&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=&#123;RAND8&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=&#123;RAND9&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=&#123;RAND10&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=&#123;RAND11&#125;&#125;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> baseRand = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> otherRand = &#123;</span><br><span class="line">    <span class="number">30</span>,<span class="number">40</span>,<span class="number">90</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">90</span>,<span class="number">90</span>,<span class="number">40</span>,<span class="number">25</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">36</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> i ~= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        baseRand = baseRand - <span class="number">11</span></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">            otherRand[index] = value + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> tmpStr = <span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="built_in">format</span>, <span class="string">&quot;&#123;BASE&#125;&quot;</span>, baseRand)</span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(otherRand) <span class="keyword">do</span></span><br><span class="line">        tmpStr = <span class="built_in">string</span>.<span class="built_in">gsub</span>(tmpStr, <span class="string">&quot;&#123;RAND&quot;</span>..<span class="built_in">tostring</span>(index)..<span class="string">&quot;&#125;&quot;</span>, value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(tmpStr)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[3] = &#123;</span><br><span class="line">    &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=5000&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=30&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=25&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=90&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=90&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=40&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=25&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=5&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[3] = &#123;</span><br><span class="line">    &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=4989&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=31&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=41&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=91&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=41&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=26&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=26&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=91&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=91&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=41&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=26&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=6&#125;,</span><br><span class="line">&#125;</span><br><span class="line">    &lt;...&gt;</span><br><span class="line">[3] = &#123;</span><br><span class="line">    &#123;ItemKey=&quot;nil&quot;, Num = 1, Bind = 1, Rand=4615&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品1&quot;, Num = 1, Bind = 1, Rand=65&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品2&quot;, Num = 1, Bind = 1, Rand=75&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品3&quot;, Num = 1, Bind = 1, Rand=125&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品4&quot;, Num = 1, Bind = 1, Rand=75&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品5&quot;, Num = 1, Bind = 1, Rand=60&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品6&quot;, Num = 1, Bind = 1, Rand=60&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品7&quot;, Num = 3, Bind = 1, Rand=125&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品8&quot;, Num = 1, Bind = 1, Rand=125&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品9&quot;, Num = 3, Bind = 1, Rand=75&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品10&quot;, Num = 5, Bind = 1, Rand=60&#125;,</span><br><span class="line">    &#123;ItemKey=&quot;物品11&quot;, Num = 1, Bind = 1, Rand=40&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到,<code>otherRand</code>表中的数值也正常地发生了改变</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Lua" scheme="https://mralridge.github.io/tags/Lua/"/>
    
    <category term="踩坑" scheme="https://mralridge.github.io/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>浅入浅出游戏引擎笔记（一）</title>
    <link href="https://mralridge.github.io/2024/06/24/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://mralridge.github.io/2024/06/24/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-06-24T06:14:45.000Z</published>
    <updated>2024-06-25T01:06:42.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-openGL环境搭建"><a href="#0-openGL环境搭建" class="headerlink" title="0&#x2F;openGL环境搭建"></a>0&#x2F;openGL环境搭建</h3><p>在【从0开始手搓游戏引擎】系列里面，图形API是自己手动调用的，刚开始Windows窗体和DX11还好，到了openGL真的就是噩梦，虽然说openGL的跨平台做的非常好，但是作为初学者上来就接触这么多代码还是有点发怵。索性可以通过glfw可以通过几行代码生成整个OpenGL环境，果然学一门东西还是要从简单的开始入手，没有几个人能够撑下来“这是攻击，这是防御，这是大树守卫环节”。</p><p>下面是涉及到的代码，我尽量用我的理解写下来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glad/gl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLFW_INCLUDE_NONE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GLFWwindow* window;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化glfw */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">glfwInit</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建一个Window 和 OpenGL上下文 */</span></span><br><span class="line">    window = <span class="built_in">glfwCreateWindow</span>(<span class="number">960</span>, <span class="number">640</span>, <span class="string">&quot;Hello World&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!window)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建失败就退出</span></span><br><span class="line">        <span class="built_in">glfwTerminate</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 激活上面创建的OpenGL上下文 */</span></span><br><span class="line">    <span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">    <span class="built_in">gladLoadGL</span>(glfwGetProcAddress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 进入游戏引擎主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Render here */</span></span><br><span class="line">        <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);</span><br><span class="line">        <span class="built_in">glClearColor</span>(<span class="number">49.f</span>/<span class="number">255</span>,<span class="number">77.f</span>/<span class="number">255</span>,<span class="number">121.f</span>/<span class="number">255</span>,<span class="number">1.f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Swap front and back buffers */</span></span><br><span class="line">        <span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理鼠标 键盘事件 */</span></span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大体表述的处理流程就是下面这样：</p><p><img src="https://www.thisisgame.com.cn/md/cpp-game-engine-book/imgs/opengl_dev_env/dev_env_configure/opengl_flow.jpg" alt="基本流程"></p><h3 id="1-绘制图形"><a href="#1-绘制图形" class="headerlink" title="1&#x2F;绘制图形"></a>1&#x2F;绘制图形</h3><table><thead><tr><th align="center">文件名称</th><th align="center">文件描述</th></tr></thead><tbody><tr><td align="center">main.cpp</td><td align="center">主逻辑</td></tr><tr><td align="center">VertexData.h</td><td align="center">顶点数据(坐标、颜色)</td></tr><tr><td align="center">ShaderSource.h</td><td align="center">Shader代码(顶点Shader和片段Shader)</td></tr></tbody></table><p><code>VertexData.h</code>用来存放需要绘制的三角形相关顶点数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> UNTITLED_VERTEXDATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNTITLED_VERTEXDATA_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glm/glm.hpp&gt;</span></span></span><br><span class="line"><span class="comment">// 顶点的坐标信息</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> glm::vec3 kPositions[<span class="number">3</span>] = &#123;</span><br><span class="line">        glm::vec3&#123; <span class="number">-1.0f</span>, <span class="number">-1.0f</span>,<span class="number">0.0f</span>&#125;,</span><br><span class="line">        glm::vec3&#123;  <span class="number">1.0f</span>, <span class="number">-1.0f</span>,<span class="number">0.0f</span>&#125;,</span><br><span class="line">        glm::vec3&#123;   <span class="number">0.f</span>,  <span class="number">1.0f</span>,<span class="number">0.0f</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 顶点的颜色信息</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> glm::vec4 kColors[<span class="number">3</span>] = &#123;</span><br><span class="line">        glm::vec4&#123; <span class="number">1.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> ,<span class="number">1.f</span>&#125;,</span><br><span class="line">        glm::vec4&#123; <span class="number">0.f</span>, <span class="number">1.f</span>, <span class="number">0.f</span> ,<span class="number">1.f</span>&#125;,</span><br><span class="line">        glm::vec4&#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">1.f</span> ,<span class="number">1.f</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//UNTITLED_VERTEXDATA_H</span></span></span><br></pre></td></tr></table></figure><p>然后是着色器的代码，由于本人对着色器仍然处于一知半解的状态，所以就只贴代码.大体来说就是告诉显卡顶点该怎么绘制，顶点间的片段该怎么绘制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by captain on 2021/3/25.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> UNTITLED_SHADERSOURCE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNTITLED_SHADERSOURCE_H</span></span><br><span class="line"><span class="comment">//顶点着色器代码</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* vertex_shader_text =</span><br><span class="line">        <span class="string">&quot;#version 110\n&quot;</span></span><br><span class="line">        <span class="string">&quot;uniform mat4 u_mvp;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;attribute  vec3 a_pos;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;attribute  vec4 a_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;varying vec4 v_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;    gl_Position = u_mvp * vec4(a_pos, 1.0);\n&quot;</span></span><br><span class="line">        <span class="string">&quot;    v_color = a_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"><span class="comment">//片段着色器代码</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* fragment_shader_text =</span><br><span class="line">        <span class="string">&quot;#version 110\n&quot;</span></span><br><span class="line">        <span class="string">&quot;varying vec4 v_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;    gl_FragColor = v_color;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//UNTITLED_SHADERSOURCE_H</span></span></span><br></pre></td></tr></table></figure><p>看完之后,我大致的理解就是下图:</p><p><img src="https://s21.ax1x.com/2024/06/24/pksSAeS.png" alt="着色器绘制图形的基本过程"></p><p>Shader本质上来说就是运行在GPU上面的程序</p><blockquote><p>目前市面上的手机，很大一部分仍然是OpenGL ES3.0的版本或更低。</p><p>Computer Shader在OpenGL ES 3.1版本才开始支持。</p><p>Geometry Shader在OpenGL ES 3.2版本才开始支持。</p></blockquote><h3 id="2-顶点着色器"><a href="#2-顶点着色器" class="headerlink" title="2&#x2F;顶点着色器"></a>2&#x2F;顶点着色器</h3><blockquote><p>顶点着色器的功能就是：<code>对输入的顶点坐标进行处理，然后再输出。</code></p></blockquote><h4 id="版本限定"><a href="#版本限定" class="headerlink" title="版本限定"></a>版本限定</h4><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 110</span></span><br></pre></td></tr></table></figure><p>每个Shader开头的语句,就是版本限定,也就是说如果你的设备不支持这个版本,那么这个Shader将直接被跳过</p><h4 id="统一变量与属性变量以及输出变量"><a href="#统一变量与属性变量以及输出变量" class="headerlink" title="统一变量与属性变量以及输出变量"></a>统一变量与属性变量以及输出变量</h4><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVPMatrix;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> a_pos;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_color;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_color;</span><br></pre></td></tr></table></figure><p>由于Shader是运行在GPU上的程序,而GPU是并行运算的.二者的区别就在于一组顶点如果分摊到GPU的逻辑单元,如果每个逻辑单元处理的是相同的数据,那么就称之为统一变量,反之就是属性变量</p><p>变量的修饰有点类似于OOP中的public与private</p><p>attribute所修饰的属性变量每执行一次Shader就需要被重新赋值</p><blockquote><p>输出变量由varying关键字修饰，用于从顶点着色器，传递数据到片段着色器。</p><p>每个Shader都有入口函数 main()，顶点Shader主要工作就是：计算坐标。</p><p>得到坐标计算结果后，传给内置变量 gl_Position。</p><p>GPU拿到gl_Position，执行裁剪。</p></blockquote><h3 id="3-片段着色器"><a href="#3-片段着色器" class="headerlink" title="3&#x2F;片段着色器"></a>3&#x2F;片段着色器</h3><blockquote><p>片段着色器(像素着色器)的功能就是：输出颜色。</p><p>片段着色器(像素着色器)也是并行的，不过执行的次数不是顶点个数，而是屏幕像素个数。</p><p>举例绘制一个960x540的长方形，每一个像素点的颜色，都是通过执行一次片段着色器来得到，那么GPU需要执行960x540次。</p></blockquote><p>顶点着色器的输出变量,就是片段着色器的输入变量</p><blockquote><p>片段着色器一般都是输出到<code>gl_FragColor</code>这个内置变量。<br>所有从顶点着色器输出到片段着色器的数据，都会插值！</p></blockquote><h3 id="4-UV"><a href="#4-UV" class="headerlink" title="4&#x2F;UV"></a>4&#x2F;UV</h3><blockquote><p>UV坐标指的是顶点对应在图片的哪个位置</p></blockquote><p>UV的坐标范围是[0f, 1f],UV映射就是顶点坐标和贴图对应起来的操作.</p><p>贴图文件大致分为三种:</p><ul><li>没有压缩的图片格式 bmp</li><li>CPU压缩的图片格式 无损压缩:png,有损压缩:jpg</li><li>显卡支持的图片格式</li></ul><p>贴图的显示方式差不多就是下面这样:</p><p><img src="https://s21.ax1x.com/2024/06/24/pks9pKP.png" alt="贴图的渲染过程"></p><h3 id="5-杂项笔记"><a href="#5-杂项笔记" class="headerlink" title="5&#x2F;杂项笔记"></a>5&#x2F;杂项笔记</h3><p>在GPU上创建对象，都是分三步，调用3个API：</p><ul><li><code>glGenxxxx</code> 在GPU上进行创建xx对象</li><li><code>glBindxxx</code> 将xx对象指定为类型</li><li><code>glxxxxxxx</code> 上传数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="游戏引擎" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="c++" scheme="https://mralridge.github.io/tags/c/"/>
    
    <category term="浅入浅出" scheme="https://mralridge.github.io/tags/%E6%B5%85%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>如何在半个小时以内用Hexo完成博客网站的搭建</title>
    <link href="https://mralridge.github.io/2024/06/21/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%8A%E4%B8%AA%E5%B0%8F%E6%97%B6%E4%BB%A5%E5%86%85%E7%94%A8Hexo%E5%AE%8C%E6%88%90%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://mralridge.github.io/2024/06/21/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%8A%E4%B8%AA%E5%B0%8F%E6%97%B6%E4%BB%A5%E5%86%85%E7%94%A8Hexo%E5%AE%8C%E6%88%90%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2024-06-21T08:48:53.000Z</published>
    <updated>2024-06-21T09:19:45.485Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-一些废话"><a href="#0-一些废话" class="headerlink" title="0&#x2F;一些废话"></a>0&#x2F;一些废话</h3><p>在我本人折腾了这么多的东西里面，我真正学会了、能够写出教程来的好像就只有用Hexo建站了，所以趁着自己还没忘，把这方面的知识记录下来</p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1&#x2F;准备工作"></a>1&#x2F;准备工作</h3><p>其实Hexo搭建完之后的日常使用很简单，只需要用终端执行一些命令、文章就是正常的markdown文件，所以理论上来说，准备一个终端和一个MD编辑器就可以。</p><p>但是呢，配置的过程中又少不了跟yml这样的文件打交道，简单的文本编辑软件没有代码高亮实在看的难受，而且来回切换软件对我来说感觉挺麻烦的，所以要我选的话，一个vscode足矣。</p><p>总结下来你要准备以下几样:</p><ul><li>VsCode</li><li>Node.js</li><li>Git</li></ul><h4 id="1-1-VsCode的安装"><a href="#1-1-VsCode的安装" class="headerlink" title="1.1&#x2F;VsCode的安装"></a>1.1&#x2F;VsCode的安装</h4><p>去<a href="https://code.visualstudio.com/" title="点击跳转">这里</a>下载一个适合你所使用平台的vscode，然后无脑下一步即可。</p><h4 id="1-2-NodeJs及其相关组件的安装"><a href="#1-2-NodeJs及其相关组件的安装" class="headerlink" title="1.2&#x2F;NodeJs及其相关组件的安装"></a>1.2&#x2F;NodeJs及其相关组件的安装</h4><p>在<a href="https://nodejs.org/zh-cn" title="点击跳转">这里</a>下载最新版的Node.js，个人感觉这东西的版本差异不是很大，只要是LTS版本一般不会出现什么奇奇怪怪的问题,同样也是无脑下一步即可。</p><p>完成安装之后打开你的终端，输入以下命令来验证安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果正常出现以下结果，则证明这一步你做对了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v20.11.1</span><br><span class="line"></span><br><span class="line">&gt; npm -v</span><br><span class="line">10.2.4</span><br></pre></td></tr></table></figure><blockquote><p>如果你使用powershell出现了这样的报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无法加载文件XXXXXXXXXX.ps1, 因为在此系统上禁止运行脚本</span><br></pre></td></tr></table></figure><p>通过管理员模式打开powershell,然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-executionpolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>在输出中选择<code>[A]全是</code>即可</p></blockquote><p>之后我们来安装Hexo相关的组件</p><p>在终端输入下面的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>等待安装完成过后，输入以下指令来验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现类似下面的输出，则说明安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">hexo: 7.2.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: win32 10.0.19045 undefined</span><br><span class="line">node: 20.11.1</span><br><span class="line">acorn: 8.11.2</span><br><span class="line">ada: 2.7.4</span><br><span class="line">ares: 1.20.1</span><br><span class="line"><span class="built_in">base64</span>: 0.5.1</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">cjs_module_lexer: 1.2.2</span><br><span class="line">cldr: 43.1</span><br><span class="line">icu: 73.2</span><br><span class="line">llhttp: 8.1.1</span><br><span class="line">modules: 115</span><br><span class="line">napi: 9</span><br><span class="line">nghttp2: 1.58.0</span><br><span class="line">nghttp3: 0.7.0</span><br><span class="line">ngtcp2: 0.8.1</span><br><span class="line">openssl: 3.0.13+quic</span><br><span class="line">simdutf: 4.0.4</span><br><span class="line">tz: 2023c</span><br><span class="line">undici: 5.28.3</span><br><span class="line">unicode: 15.0</span><br><span class="line">uv: 1.46.0</span><br><span class="line">uvwasi: 0.0.19</span><br><span class="line">v8: 11.3.244.8-node.17</span><br><span class="line">zlib: 1.2.13.1-motley-5daffc7</span><br></pre></td></tr></table></figure><p>之后我们就可以开始博客的初始化了</p><h3 id="2-博客网站的搭建"><a href="#2-博客网站的搭建" class="headerlink" title="2&#x2F;博客网站的搭建"></a>2&#x2F;博客网站的搭建</h3><p>首先挑选你一个你喜欢的目录来存放我们的博客网站，打开终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>之后hexo便会在当前目录生成所必须的文件，当出现<code>INFO Start blogging with Hexo!</code>时，则代表网站初始化成功</p><p>此时我们输入<code>hexo server</code>便可在本地开启网站，默认情况下，本地博客会在<code>localhost:4000</code>上开启,在浏览器中打开即可访问到我们的博客网站。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0-一些废话&quot;&gt;&lt;a href=&quot;#0-一些废话&quot; class=&quot;headerlink&quot; title=&quot;0&amp;#x2F;一些废话&quot;&gt;&lt;/a&gt;0&amp;#x2F;一些废话&lt;/h3&gt;&lt;p&gt;在我本人折腾了这么多的东西里面，我真正学会了、能够写出教程来的好像就只有用Hexo建站了</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://mralridge.github.io/tags/Hexo/"/>
    
    <category term="杂项" scheme="https://mralridge.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>从0开始手搓游戏引擎（一）</title>
    <link href="https://mralridge.github.io/2024/06/20/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%89%8B%E6%90%93%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://mralridge.github.io/2024/06/20/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%89%8B%E6%90%93%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-06-20T09:35:52.000Z</published>
    <updated>2024-06-25T01:07:36.009Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="无关痛痒的一些废话"><a href="#无关痛痒的一些废话" class="headerlink" title="无关痛痒的一些废话"></a>无关痛痒的一些废话</h3><p>该系列是跟着知乎<a href="https://zhuanlan.zhihu.com/p/510064704" title="点击跳转">@文礼</a>大佬的系列教程而写的，由于我本人实在才疏学浅，肯定会有错误的地方，希望写完之后我还能想起来吧。</p><p>由于想起来写这篇文章的时候，我已经速通了图形API部分，并且忘记每个section保存提交，所以这一篇可能会特别长，涵盖大佬一至五节的内容。</p><h3 id="什么是游戏引擎"><a href="#什么是游戏引擎" class="headerlink" title="什么是游戏引擎"></a>什么是游戏引擎</h3><p>为了很方便的理解这个概念，我们不妨想象一下这么一个场景。</p><p>你处于</p><h3 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h3><blockquote><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>我推荐各位充分利用git的checkout功能,在每一章的开始都签出一个新的分支</p><p>这样做的好处有很多</p><p>一是就是当你回顾代码的时候就会发现自己的学习成果.</p><p>二是如果有不明白的地方,直接切换到对应的分支,随时回滚,各个分支的状态都是独立的.</p></blockquote><p>在你的目录下创建一个名为<code>Framework</code>的目录, 这里存放的就是与我们的引擎有关的所有代码。但是我们是通过C&#x2F;C++来实现，所以要在这个目录下面再创建<code>Common</code>与<code>Interface</code>两个目录。<code>Common</code>目录下存放的是引擎的核心代码，而<code>Interface</code>目录下存放的则是我们提前定义的接口, 接口与实现分开放。这样做的好处就是当以后的代码文件变多了，项目仍然有个清晰的目录结构，起码其他人来阅读源码也会方便很多。</p><p>你可以直接用资源管理器做这些操作，当然你也可以用更GEEK一点的方式，在你准备好的目录里面打开终端，依次输入以下指令。</p><p>（由于我的Linux操作水平太低了，等我玩明白Linux之后再补Linux上的命令吧）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir Framework</span><br><span class="line"><span class="built_in">cd</span> Framework</span><br><span class="line">mkdir Common</span><br><span class="line">mkdir Interface</span><br></pre></td></tr></table></figure><p>完成之后你的目录结构应该是这样的:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你准备好的目录</span><br><span class="line">└─Framework</span><br><span class="line">   ├─Common</span><br><span class="line">   └─Interface</span><br></pre></td></tr></table></figure><p>在Interface目录下创建文件<code>Interface.h</code>, 内容如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义alias,提高代码可读性</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Interface class</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> implements public</span></span><br></pre></td></tr></table></figure><p>这里就涉及到了两个知识,<code>#pragma once</code>代表的是这个头文件在包含的时候只会加载编译一次.因为编译器处理<code>include</code>的方式是直接将其在文件中展开,在项目体量变大之后,同一个文件被多次<code>include</code>,而如果这个文件中又<code>include</code>了其他的文件,那么就有可能会出现重复定义的情况,之后编译器就会报错,所以这种会被经常<code>include</code>的文件最好加上这句,省的之后出现问题再来排查变得非常麻烦.</p><p>而定义了<code>Interface</code>与<code>implements</code>主要还是为了区分实例与实现, 像我这样三流水平的码农很长一段时间都没有真正理解下面这段话</p><blockquote><h3 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h3><p>接口是一种规范或合同，它定义了一组方法，但不提供具体实现。接口的主要目的是规定一个类应该具备哪些行为，而不涉及这些行为的具体实现细节。接口中的方法默认是抽象的（在Java中明确声明为public abstract），这意味着它们没有实际的执行体。此外，接口也可以声明常量（默认为public static final），这些常量提供了接口使用者需要遵循的固定值或设定。</p><p>接口的作用在于促进多态性，允许不同的类按照相同的接口规范来实现，这样就可以用统一的方式处理不同类型的对象。一个类可以实现一个或多个接口，从而提供接口所要求行为的具体实现。</p><h3 id="实现-implement"><a href="#实现-implement" class="headerlink" title="实现(implement)"></a>实现(implement)</h3><p>实现指的是一个类按照接口所规定的规范，提供具体的方法实现。当一个类声明它实现了某个接口时，它就必须提供那个接口中所有抽象方法的实现。这确保了接口的每个要求在实现类中都有相应的代码来完成。</p><p>例如，假设有这样一个接口Animal，它定义了一个speak()方法。任何实现这个接口的类，如Dog和Cat，都需要提供自己版本的speak()方法，狗可能会实现为woof()，猫则是meow()。</p></blockquote><p>(严格意义上来说,接口在C++中可以通过虚函数来实现,但是为了代码更清楚直观,我们选择用alias的方式)</p><p>(解释Runtime)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义Runtime Module都应该支持的方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once<span class="comment">// 头文件在编译的时候只处理一次</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Interface.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> My &#123;</span><br><span class="line">Interface IRuntimeModule&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 虚析构函数,防止派生子类只调用基类的析构函数</span></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">IRuntimeModule</span>() &#123;&#125;;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">Initialize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 模块结束后执行</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Finalize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 最小单位刻</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个Runtime的接口定义中,我们定义了四个要实现的行为.</p><ul><li><code>~IRuntimeModule()</code> 虚析构函数</li></ul><h4 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h4><blockquote><p>对于有其他虚函数的类，建议把析构函数也声明为virtual。这是因为如果不这么做，那么当使用基类指针释放派生类的实例的时候，可能导致只调用了基类的析构函数，从而产生memory leak的情况。</p></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>对于大部分系统来说,生命周期内肯定会有初始化与结束,所以这一块我的理解就是在主循环之前执行一次初始化,来准备好主循环所需要的东西.</p><h4 id="Finalize"><a href="#Finalize" class="headerlink" title="Finalize"></a>Finalize</h4><p>这个我就不知道该怎么翻译好了,这一部分看大佬的描述有点像一些oop语言里面的gc过程,在主循环结束之后进行清理善后工作.</p><h4 id="刻"><a href="#刻" class="headerlink" title="刻"></a>刻</h4><p>如果你们有Minecraft玩家的话,<code>刻</code>这个概念应该会很熟悉.简单来说呢,我们可以把游戏引擎看作另一个世界的规则,在我们这个世界上,时间的最小单位是普朗克时间,也就是说,我们的世界是根据普朗克时间来流动的.我们身边发生的每一件事,都可以看作是一个个普朗克时间的结果,也就是由它推动着世界前进.那么到游戏引擎创建的世界中来,游戏世界中的各种物理、数学法则，都是在<code>刻</code>这个过程中运算的，所以可以把这个函数看作是游戏引擎的最小单位.</p><p>既然我们已经定义好了Runtime的接口，接下来就应该到下一层应用层的定义了</p><p>还是在这个目录，创建<code>IApplication.hpp</code>,文件内容如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Interface.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;IRuntimeMoudule.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> My &#123;</span><br><span class="line">Interface IApplication : implements IRuntimeModule</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">Initialize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Finalize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 这个接口用来查询App是否需要退出</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">IsQuit</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们的Application是Runtime的实例，所以要实现<code>IRuntimeModule</code>。而且因为我们要手搓的游戏引擎需要实现跨平台的特性，而不同平台让Application退出的方式是不一样的，所以要在这里定义一个<code>IsQuit()</code>来为退出预留出实现</p><p>至此我们已经完成了基本的接口定义，接下来就是具体的实现了,在<code>Common</code>目录下创建<code>BaseApplication.hpp</code>, 文件内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;IApplication.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> My &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseApplication</span> : implements IApplication</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">Initialize</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Finalize</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 主循环的一个周期 One cycle of the main loop</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">IsQuit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// 标志着App是否需要退出主循环</span></span><br><span class="line"><span class="type">bool</span> m_bQuit;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="游戏引擎" scheme="https://mralridge.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="c++" scheme="https://mralridge.github.io/tags/c/"/>
    
    <category term="从0开始手搓游戏引擎" scheme="https://mralridge.github.io/tags/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%89%8B%E6%90%93%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>回忆宫殿堂堂复活!</title>
    <link href="https://mralridge.github.io/2024/06/20/%E5%9B%9E%E5%BF%86%E5%AE%AB%E6%AE%BF%E5%A0%82%E5%A0%82%E5%A4%8D%E6%B4%BB/"/>
    <id>https://mralridge.github.io/2024/06/20/%E5%9B%9E%E5%BF%86%E5%AE%AB%E6%AE%BF%E5%A0%82%E5%A0%82%E5%A4%8D%E6%B4%BB/</id>
    <published>2024-06-20T06:24:05.000Z</published>
    <updated>2024-06-20T06:26:14.219Z</updated>
    
    <content type="html"><![CDATA[<p>经过了一系列事情之后,生活逐渐稳定下来了,所以回忆宫殿也要堂堂复活.</p><p>由于目前从事的工作原因,今后更新的文章内容,会更倾向于游戏行业的一些东西,包括最近在学习的游戏引擎底层等.</p><p>本着记录好自己成长的原则,一些生活上的琐事也要在这里记录下来.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经过了一系列事情之后,生活逐渐稳定下来了,所以回忆宫殿也要堂堂复活.&lt;/p&gt;
&lt;p&gt;由于目前从事的工作原因,今后更新的文章内容,会更倾向于游戏行业的一些东西,包括最近在学习的游戏引擎底层等.&lt;/p&gt;
&lt;p&gt;本着记录好自己成长的原则,一些生活上的琐事也要在这里记录下来.&lt;/p</summary>
      
    
    
    
    
  </entry>
  
</feed>
